---
title: "Presentation 1: Introduction"
format: html
project:
  type: website
  output-dir: ../docs
---

## Introduction

I. The Fundamentals of R (R codes for presentation)

Center for Health Data Science, University of Copenhagen

These files are generated by the Quarto file presentation1.qmd

## The Quarto Way!

This section will go through how the Quarto format works and how to code in here.

## This is the second largest header (Header 2)

###### This is the smallest header (Header 6)

This is normal text. Yes it is larger than the smallest header. A Quarto document works like a word document where we can write with **bold** or *italic* and insert thing like a table:

| My friends | Their favorite drink | Their favorite food |
|------------|----------------------|---------------------|
| Micheal    | Beer                 | Burger              |
| Jane       | Wine                 | Lasagne             |
| Robert     | Water                | Salad               |

... a picture:

[![This is a cute cat](images/striped-grey-kitten.jpg){fig-alt="Miw" fig-align="center" width="500"}](https://www.zooplus.co.uk/magazine/cat/kitten/how-to-monitor-your-kittens-weight)

We can also make a list of things we like:

-   Coffee

-   Cake

-   Water

-   Fruit

## Modes of Quarto

There are two modes of Quarto: **Source and Visual**. The one that looks like Word is Visual. In the left part of the panel you can change to Source. If you have heard about Rmarkdown, the Source mode is essentially the same thing. Here you can see that headers are marked with hashtags. The more hashtags, the smaller the title. Some features can only be added when you are in Source mode. E.g [write blue text]{style="color:blue"} is coded like this in the source code `[write blue text\]{style="color:blue"}`. We will only spend time in the Visual mode since it is the nicest to look at and we don't need all of these fancy features in this course. Feel free to play around with it after the course!

## Code chunks and structure

Code chunks are where the coding come in. Go to the very right of the panel and press the green box with the C. A grey code chunk will appear with '{r}' in the beginning. This mean that it is an R code chunk. It is also possible to insert code chunks of other coding language, but we will stick to R since that is what we are here to learn. For executing the code, press the green button in the top right of the code chunk.

If you have ever worked with an R script, a code chunk is just like a part of an R script.

```{r}

```

Below is a code chunk with a comment. A comment is a line that starts with a hashtag. Comments can be useful in longer code chunks and will often describe the code.

```{r}
# This is a comment. Here I can write whatever I want because it is in hashtags. 
```

Below I try to write text in a code chuck. If I try to execute I will get an error because R is trying to interpret it as code and does not understand.

```{r}
# Text without hashtag gets errors when executed
```

**NB!** Write executable code in the code chunks and execute it.

```{r}
1+3
```

You can add comments above or to the right of the code. This will not influence the executing of the code.

```{r}
# Place a comment here 
1+3 # or place a comment here
```

## Alter output of code chunks

You don't need this but it might be a good feature for your later R carrer.

**Show or hide code.** `echo=FALSE` will hide the code and `echo=TRUE` will show the code. Default is TRUE.

The code (1+3) is [not]{.underline} shown, but the result (4) is shown (`{r echo=FALSE}`):

```{r echo=FALSE}
# The code will be hidden, but the output will be shown.
1+3
```

**Control whether code is executed.** eval=FALSE not execute the code and eval=TRUE will execute the code. Default is TRUE.

The code (1+3) is shown, but the result (4) is [not]{.underline} shown (`{r eval=FALSE}`):

```{r eval=FALSE}
1+3
```

**Control messages, warnings and errors.** Maybe you have a code chunk that you know will produce one of the three and you don't want to look at it. It is not a good idea to hide these statements (especially the errors) before you know what they are. But in a report, it might be nice to be able to mute the messages or the warnings.

Warning is [not]{.underline} printed (`{r message=FALSE, warning=FALSE, error=TRUE}`):

```{r message=FALSE, warning=FALSE, error=TRUE}
log(-1)
```

Warning is printed (`{r message=TRUE, warning=TRUE, error=TRUE}`):

```{r message=TRUE, warning=TRUE, error=TRUE}
log(-1)
```

## Shortcuts

Skip if you are overwhelmed!

If you want to look effortless while coding and impress you colleagues, have a look at the shortcuts. There are shortcuts for almost anything and you can find them (*Tools* –\> *Keyboard Shortcuts Help*) or change them to your own liking (*Tools* –\> *Modify Keyboard Shortcuts...*).

### Render: Making the report

In the panel there is a blue arrow and the word *Render*. Open the rendered html file in your browser and admire your work.

[**Let's get to coding!**]{style="color:blue"}

## Working directory

The term 'path' refers to the trajectory you need to follow from the place you are "located" on your computer to the place you want to work from. When working with Quarto your working directory is always the same locations as your Quarto document. The working becomes important when we start loading data in from other places (presentation 2).

Where am I now?

```{r}
getwd()
```

**Set working directory**

The working directory can changed but when working with Quarto this only influences individual code chunks (which is mentioned in a warning when executing the code below). However it is really useful when working with raw R scripts which are taught in the upcoming R for data science (R part 2) course.

```{r}
# setwd('../Exercises/')
getwd()
```

In another chuck, the working directory is the same as before.

```{r}
getwd()
```

## Variable assignment

In R we use an arrow for variable assignment. You may call your almost variables whatever you like. [DO NOT]{.underline}: use special characters in variable names, i.e. &, ), \$ etc. or make spaces in naming.

**The first variable we create is 'a'**

```{r}
a <- 1
```

**Now we print 'a' and see what value it has**

```{r}
print(a)
```

**We check the class of a**

```{r}
class(a)
```

**Let's create and other variable, b**

```{r}
b <- 3
```

**We add a and b [without]{.underline} reassignment** and get the result printed

```{r}
a + b 
```

If we want to save the result we have to reassign it to a new variable

```{r}
c <- a + b
print(c)
```

... or overwrite an already existing variable. Here, a is "updated" to the sum of a and b. NB! Be careful with this.

```{r}
a <- a + b
print(a)
```

**A vector of numbers named num1**

```{r}
num1 <- c(5,1,11,6,4)
num1
```

**Find the mean of the vector**

```{r}
(5+1+11+6+4)/5
```

## Functions and Arguments

Function are chunks of code wrapped in a way which makes the code inside reusable. A function takes an input(s) (arguments) and returns an output(s). You can make your own function but in this course you will only use the functions that are already available in the R packages.

**Let's look at the mean() function**

```{r}
?mean()
```

**Taking the mean of a vector**

```{r}
mean(num1)
```

**Functions makes code reusable**

```{r}
num2 <- c(0,3,4,9,1,2,7,10,2,11) # Define new vector
mean(num2) # Print the mean of the vector 
```

**Find length of vector**

```{r}
length(num1)
length(num2)
```

## Simple summary statistics

Summary statistics is information such as number of items, mean, median, standard deviation and sum.

**Summary statistics of a vector**

```{r}
mean(num2)
median(num2)
sd(num2)
sum(num2)

min(num2)
max(num2)
```

## R packages

R packages are collections of functions written by R developers and super users and they make our lives much easier. Functions used in the same type of R analysis/pipeline are bundled and organized in packages. There is a help page for each package to tell us which functions it contains and which arguments go into these. In order to use a package we need to download and install it on our computer. Most R packages are stored and maintained on the CRAN\[<https://cran.r-project.org/mirrors.html%5D> repository.

**Install a package**

```{r}
# install.packages('tidyverse')
```

**Load packages**

```{r}
library(tidyverse)
```

**Query package**

```{r}
?tidyverse
```

**Query function from package**

```{r}
?dplyr::select
```

## Data structures

In the example below we will make two vectors into a tibble. Tibbles are the R object types you will mainly be working with in this course. We will try to convert between data types and structures using the collection of 'as.' functions.

**A vector of characters**

```{r}
people <- c("Anders", "Diana", "Tugce", "Henrike", "Chelsea", "Valentina", "Thile", "Helene")
people
```

**A vector of numeric values**

```{r}
joined_year <- c(2019, 2020, 2020, 2021, 2023, 2022, 2020, 2024)
joined_year
```

**Access data type or structure with the class() function**

```{r}
class(people)
class(joined_year)
```

**Convert joined_year to character values**

```{r}
joined_year <- as.character(joined_year)
joined_year
class(joined_year)
```

**Convert joined_year back to numeric values**

```{r}
joined_year <- as.numeric(joined_year)
joined_year
```

**Convert classes with the 'as.' functions**

```{r}
# as.numeric()
# as.integer()
# as.character()
# as.factor()
# ...
```

**Let's make a tibble from two vectors**

```{r}
my_data <- tibble(name = people, 
                  joined_year = joined_year)

my_data
class(my_data)
```

Just like you can convert between different data types, you can convert between data structures/objects.

**Convert tibble to dataframe**

```{r}
my_data2 <- as.data.frame(my_data)
class(my_data2)
```

**Convert classes with the 'as.' functions**

```{r}
# as.data.frame()
# as.matrix()
# as.list()
# as.table()
# ...
# as_tibble()
```

## Fundamental operations

You can inspect an R objects in different ways:

1\. Simply call it and it will be printed to the console. 2. With large object it is preferable to use \`head()\` or \`tail()\` to only see the first or last part. 3. To see the data in a tabular excel style format you can use \`view()\`

**Look at the "head" of an object**

```{r}
head(my_data, n = 4)
```

**Open up tibble as a table (Excel style)**

```{r}
view(my_data)
```

**dim(), short for dimensions, which returns the number of rows and columns of an R object**

```{r}
dim(my_data)
```

**Look at a single column from a tibble using the '\$' symbol**

```{r}
my_data$joined_year
```
