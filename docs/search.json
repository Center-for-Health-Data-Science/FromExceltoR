[
  {
    "objectID": "Slideshow/material_for_slides.html",
    "href": "Slideshow/material_for_slides.html",
    "title": "Presentation 4",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nggplot2 additive structure\n\nset.seed(123)\n\ndf = data.frame(sample = sample(x = c('A','B','C','D'), size = 100, replace = T), \n                measure = sample(x = 1:20, size = 100, replace = T))\n\nhead(df)\n\n  sample measure\n1      C      20\n2      C      14\n3      C       3\n4      B       8\n5      C      16\n6      B      12\n\n\n\nggplot(df, \n       aes(x = sample, \n           y = measure))\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot1.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = sample, \n           y = measure)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot2.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = sample, \n           y = measure,\n           fill = sample)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot3.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = sample, \n           y = measure,\n           fill = sample)) +\n  geom_boxplot() + \n  labs(x = 'Sample', \n       y = 'Measure (cm)', \n       title = 'Boxplots of measurements stratified by sample')\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot4.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = sample, \n           y = measure,\n           fill = sample)) +\n  geom_boxplot() + \n  labs(x = 'Sample', \n       y = 'Measure (cm)', \n       title = 'Boxplots of measurements stratified by sample') + \n  scale_fill_manual(values = c(\"pink\", \"lightgreen\", \"lavender\", \"lightblue\"))\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot5.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = sample, \n           y = measure,\n           fill = sample)) +\n  geom_boxplot() + \n  labs(x = 'Sample', \n       y = 'Measure (cm)', \n       title = 'Boxplots of measurements stratified by sample') + \n  scale_fill_manual(values = c(\"pink\", \"lightgreen\", \"lavender\", \"lightblue\")) + \n  theme_bw() \n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot6.png')\n\nSaving 7 x 5 in image\n\n\n\n\nggplot basic structure\n\nlibrary(ContaminatedMixt)\ndata('wine')\n\nset.seed(123)\ncountry &lt;- sample(x = c('France', 'Italy'), size = nrow(wine), replace = TRUE)\nwine$Country &lt;- country\n\nhead(wine)\n\n    Type Alcohol Malic  Ash Alcalinity Magnesium Phenols Flavanoids\n1 Barolo   14.23  1.71 2.43       15.6       127    2.80       3.06\n2 Barolo   13.20  1.78 2.14       11.2       100    2.65       2.76\n3 Barolo   13.16  2.36 2.67       18.6       101    2.80       3.24\n4 Barolo   14.37  1.95 2.50       16.8       113    3.85       3.49\n5 Barolo   13.24  2.59 2.87       21.0       118    2.80       2.69\n6 Barolo   14.20  1.76 2.45       15.2       112    3.27       3.39\n  Nonflavanoid Proanthocyanins Color  Hue Dilution Proline Country\n1         0.28            2.29  5.64 1.04     3.92    1065  France\n2         0.26            1.28  4.38 1.05     3.40    1050  France\n3         0.30            2.81  5.68 1.03     3.17    1185  France\n4         0.24            2.18  7.80 0.86     3.45    1480   Italy\n5         0.39            1.82  4.32 1.04     2.93     735  France\n6         0.34            1.97  6.75 1.05     2.85    1450   Italy\n\n\n\nggplot(wine,\n       aes(x = Type, \n           y = Alcohol,\n           fill = Country)) + \n  geom_col()\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_basic_structure_plot1.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(wine,\n       aes(x = Type, \n           y = Alcohol)) + \n  geom_col(fill = 'hotpink')\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_basic_structure_plot2.png')\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "Exercises/exercises6.html",
    "href": "Exercises/exercises6.html",
    "title": "Data Exercise in R",
    "section": "",
    "text": "In this exercise you will practice your newly acquired R skills on an example dataset.\nIf you have your own data to work on, you can still follow the steps in the exercise where they apply."
  },
  {
    "objectID": "Exercises/exercises6.html#introduction",
    "href": "Exercises/exercises6.html#introduction",
    "title": "Data Exercise in R",
    "section": "",
    "text": "In this exercise you will practice your newly acquired R skills on an example dataset.\nIf you have your own data to work on, you can still follow the steps in the exercise where they apply."
  },
  {
    "objectID": "Exercises/exercises6.html#r-packages",
    "href": "Exercises/exercises6.html#r-packages",
    "title": "Data Exercise in R",
    "section": "R-packages",
    "text": "R-packages\nFor the data wrangling and statistical modelling we will be doing in this exercise, you will need the following R-packages: tidyverse,ggplot2,emmeans, MASS.\n\nMake sure that these packages are installed and loaded into your R environment. You likely have the packages already installed and loaded (you used these in the previous exercises) try sessionInfo() and require() (look up what these function do). If the packages are not there install them and library them as in the previous exercises."
  },
  {
    "objectID": "Exercises/exercises6.html#getting-the-dataset",
    "href": "Exercises/exercises6.html#getting-the-dataset",
    "title": "Data Exercise in R",
    "section": "Getting the Dataset",
    "text": "Getting the Dataset\nFor this exercise, we’ll use the birthweight dataset from the package MASS. It contains the birthweight of infants and some information about the mother.\nTo get it we have to load the package and then the data. We will also display the help so we can read some background info about the data and what the columns are:\n\ndata(birthwt)\n?birthwt #display help page\n\nN.B If it says &lt;Promise&gt; after birthwt in your global environment just click on it and the dataframe will be loaded properly.\nIf you have a dataset of your own you would like yo look at instead of the example data we provide here, you are very welcome to. You can again use read_excel() for excel sheets. For other formats, have a look at read.csv(), read.table(), read.delim(), etc. You can either google your way to an answer or ask one of the course instructors.\n\nNow, check the class of the dataset. We’ll be using tidyverse to do our anaylsis, so if it isn’t already a tibble, make it into one."
  },
  {
    "objectID": "Exercises/exercises6.html#exploratory-analysis",
    "href": "Exercises/exercises6.html#exploratory-analysis",
    "title": "Data Exercise in R",
    "section": "Exploratory Analysis",
    "text": "Exploratory Analysis\n\nThe Basics\nBefore performing any statistical analysis (modelling), it is necessary to have a good understanding of the data. Start by looking at:\n\nHow many variables and observations are there in the data?\nWhat was measured, i.e. what do each of the variables describe? You can rename variables via the colnames() if you want to.\nWhich data types are the variables and does that make sense? Should you change the type of any variables? Hint: Think about types factor, numerical, integer, character, etc.\nWhat is our response/outcome variable(s)? There can be several.\nIs the (categorical) outcome variable balanced?\nAre there any missing values (NA), if yes and how many? Google how to check this if you don’t know."
  },
  {
    "objectID": "Exercises/exercises6.html#diving-into-the-data",
    "href": "Exercises/exercises6.html#diving-into-the-data",
    "title": "Data Exercise in R",
    "section": "Diving into the data",
    "text": "Diving into the data\n\nNumeric variables\nSome of the measured variables in our data are numeric, i.e. continuous. For these do:\n\nCalculate summary statistics (mean, median, sd, min, max)\nCreate boxplots for each numeric variable using ggplot2, and apply scale_x_discrete() to prevent meaningless scaling of the boxplot widths.\nDo you see outliers in your dataset?\nNow remake the boxplot with two different colors, depending on the (categorical) outcome variable.\n\n\n\nCategorical variables\nOther columns describe variables that are categorical. Some of these may have been initially interpreted by R as numerical, especially if they are coded with 0/1.\n\nIf you haven’t changed their datatype to factor yet, do so now. You can see how in presentation5.Rmd.\nWhen you are done, make barplots of each categorical variable.\nThen, split up the barplot for smoke so you have two different colors for the two different values of the outcome variable (the same way you did it above for the boxplots).\nNow, add the argument position ='dodge' to geom_bar and remake the plot. What has changed? Then remake it once again with position ='fill'. What information do the different barplots show? Compare to the counts you get from the smoke column when you group the dataframe by the outcome variable.\nLastly, make a density plot of the two continuous variables lwt and bwt, split it up by smoke.\n\nExtra: Pick custom colors for your plots (look into scale_fill_manual()).\n\n\nSubsetting the data\nBased on what you have observed in the last two sections, now choose two numeric variables and two categorical variables to move forward with. Create a subset of the dataframe with only these variables and the categorical and numeric outcome."
  },
  {
    "objectID": "Exercises/exercises6.html#modelling",
    "href": "Exercises/exercises6.html#modelling",
    "title": "Data Exercise in R",
    "section": "Modelling",
    "text": "Modelling\nYou now have a prepared dataset on which we can do some modelling.\n\nRegression Model 1\nIn the Applied statistics session you’ve tried out an analysis with one way ANOVA, where you compared the effect of categorical variables (skin type) on the outcome (gene counts).\nWe’ll do something similar here but instead we will use the numerical variables as predictors and the measured birthweight as the (numerical) outcome. This is what is known as linear regression.\n\nWe can also do this with lm() and follow the same syntax as before:\n\nmodel1 &lt;- lm(resp ~ pred1, data=name_of_dataset)\n\nSimply, if the outcome variable we are interested in is continuous, then lm() will functionally be doing a linear regression. If the outcome is categorical, it will be performing ANOVA (which if you only have two groups is effectively a t-test). Have a look at this video if you want to understand why you can do a t-test / ANOVA with a linear model.\n\nNow, pick one of your numeric variables and use it to model the (numeric/continuous) outcome.\nInvestigate the model you have made by writing its name, i.e.\n\n\nmodel1\n\n\nWhat does this mean? Compare to the linear model illustration above.\nWe’ll now make a plot of your model to help us better visualize what has happened. Make a scatter plot with your predictor variable on the x-axis and the outcome variable on the y-axis.\nNow add the regression line to the plot by using the code below. For the slope and intercept, enter the values you found when you inspected the model. Does this look like a good fit?\n\n\n+ geom_abline(slope=???, intercept = ???, color = 'red')\n\n\nRepeat the process with the other numeric variable you picked.\n\nSometimes the variables we have measured are not good at explaining the outcome and we have to accept that.\n\nInstead of the geom_abline(), try geom_smooth() which provides you with a confidence interval in addition to the regression line. Look at the help for this geom (or google) to figure out what argument it needs to work!\nInspect your model in more detail with summary(). Look at the output, what additional information do you get about the model. Pay attention to the Residual standard error (RSE) and Adjusted R-squared (R2adj) at the bottom of the output. We would like RSE to be as small as possible (goes towards 0 when model improves) while we would like the R2adj to be large (goes towards 1 when model improves).\n\nN.B if you want to understand the output of a linear regression summary in greater detail have a look here.\n\nsummary(model1)\n\n\n\nRegression Model 2\n\nRemake your model (call it model2) but this time add an additional explanatory variable to the model in addition to lwt. This should be one of the categorical variable you selected to be in your subset. (smoke might be interesting, but you could also try either age and/or ht). Does adding this second exploratory variable improve the metrics RSE and/or R2adj?\n\n\nmodel2 &lt;- lm(resp ~ pred1 + pred2, data=name_of_dataset)\n\n\nFind the 95% confidence intervals for model2, by using the confint() function. If you are not familiar with confidence intervals, have a look here.\nTry the following commands (or a variation of it, depending on which variables you have included in model2), and see if you can figure out what the outcome means.\n\n\nnewData &lt;- data.frame(lwt=100, smoke=as.factor(1))\nnewData\npredict(model2, newData)\npredict(model2, newData, interval=\"prediction\")\n\n\n\n\nBonus Exercise - ANOVA\nNow, we will instead look at the two categorical variables you picked. Make a model of the outcome variable depending on one the categorical variable\n\nPick one of the two categorical variables and use it to model the (numeric) outcome, just as during the Applied Stats session:\n\n\nmodel3 &lt;- lm(resp ~ pred1, data=name_of_dataset)\n\n\ninspect the output by calling summary() on the model\n\n\nsummary(model3)\n\nYou can have a look at this website to help you understand the output of summary.\n\n\nShort detour: The meaning of the intercept in an ANOVA\nThe intercept is the estimate of the outcome variable that you would get when all explanatory variables are 0.\nSo if we have the model lm(bwt ~ smoke, data = birthData) and smoke is coded as 0 for non-smokers and 1 for smokers, the intercept is the estimate birthweight of a baby of a non-smoker. It will be significant because it is significantly different from 0, but that doesn’t mean much since we would usually expect babies to weight more than 0.\nYou can now make some other models, including several predictors and see what you get."
  },
  {
    "objectID": "Exercises/exercises2.html",
    "href": "Exercises/exercises2.html",
    "title": "Exersice 2: Tidyverse",
    "section": "",
    "text": "Create new Quarto document. For working on the exercise, create a new Quarto document with a descriptive name and save it where you can find it again, i.e. in the folder where you downloaded the teaching material. You can use the commands shown in presentation2.qmd to solve this exercise. There is no shame in outright copying from the presentation2.qmd script, provided you understand what the command is doing.\nLoad packages. You will need to load the packages tidyverse and readxl for this exercise.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2.html#setting-up",
    "href": "Exercises/exercises2.html#setting-up",
    "title": "Exersice 2: Tidyverse",
    "section": "",
    "text": "Create new Quarto document. For working on the exercise, create a new Quarto document with a descriptive name and save it where you can find it again, i.e. in the folder where you downloaded the teaching material. You can use the commands shown in presentation2.qmd to solve this exercise. There is no shame in outright copying from the presentation2.qmd script, provided you understand what the command is doing.\nLoad packages. You will need to load the packages tidyverse and readxl for this exercise.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2.html#importing-data-and-a-first-look-at-the-dataset",
    "href": "Exercises/exercises2.html#importing-data-and-a-first-look-at-the-dataset",
    "title": "Exersice 2: Tidyverse",
    "section": "Importing data and a first look at the dataset",
    "text": "Importing data and a first look at the dataset\nThe data set used in these exercises was compiled from data downloaded from the website of the UK’s national weather service, the Met Office. It is saved in the file climate.xlsx1 which can be found in the folder Exercises/Data/. The spreadsheet contains monthly data from five UK weather stations for the following variables:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\n\nLoad data. Start by importing the dataset using either the read_excel() function or the Import Dataset button and name it climate. If you load with Import Dataset it is a good idea to copy the command into your script so that the next time you run your script you can just execute that line instead of having to find the file again.\nFirst look at data. Write the name of the dataframe, i.e. climate, into the console and press enter to see the first rows of the dataset. You can also click on the climate object in the Environment panel.\nExplore your dataset and understand what data you have.\n\nHow many observations, i.e. rows are there?\nHow many data columns are there and what are their types?\nWhat is the information in each row and column?\nHow many different stations are there?\nHow many rows per station?",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2.html#working-with-the-data",
    "href": "Exercises/exercises2.html#working-with-the-data",
    "title": "Exersice 2: Tidyverse",
    "section": "Working with the data",
    "text": "Working with the data\nBefore you proceed with the exercises in this document, make sure you load the tidyverse in order to use the functions from this package.\n\nCount the number of rows that did not have any days with air frost.\nCount the number of rows per station that did not have any days with air frost.\nSelect from the climate dataset (remember to filter rows and select columns):\n\nall rows from the station in Oxford\nall rows from the station in Oxford when there were at least 100 hours of sunlight\nall rows from the stations in Oxford and Camborne when there were at least 100 hours of sunlight\na subset that only contains the station, year and rain columns\n\n\nThe next few questions build on each other, each adding a piece of code:\n\nCompute the average rainfall over the full dataset by using the summarize function. You can look at the examples we did at the end of presentation 2.\nNow, compute the average rainfall, standard deviation of the rainfall and the total rainfall (the sum) on the full dataset. I.e. all three measures should be inside the same resulting table. Have a look at the tidyverse lecture if you have trouble with this.\nNow, use group_by before summarize in order to compute group summary statistics (average, standard deviation, and sum) but split up into each of the five weather stations.\nInclude a column in the summary statistics which shows how many observations, i.e. rows, the data set contains for each station.\nSort the rows in the output in descending order according to average annual rainfall.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2.html#manipulating-the-data",
    "href": "Exercises/exercises2.html#manipulating-the-data",
    "title": "Exersice 2: Tidyverse",
    "section": "Manipulating the data",
    "text": "Manipulating the data\n\nCreate a new column in climate and save the new dataset in a different variable so you don’t overwrite your original climate data. The new column should count the number of days in each month without air frost, based on the existing af column. For this exercise, assume each month has 30 days. To find the number of days without air frost, subtract the value in the af column from 30.\nAdd another column to your new dataset that says whether the weather this month was good. We consider a month to be good if it had at least 100 hours of sunshine and less than 100 mm of rain. Otherwise the weather was bad.\nHow many months are there with good weather (use the column you made in 14) for each station? Find the station that has the most months with good weather.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2.html#complex-operations",
    "href": "Exercises/exercises2.html#complex-operations",
    "title": "Exersice 2: Tidyverse",
    "section": "Complex operations",
    "text": "Complex operations\nThe final questions require that you combine commands and variables of the type above.\n\nFor each weather station apart from the one in Armagh, compute the total rainfall and sunshine duration for months that had no days of air frost. Present the totals in centimetres and days, respectively.\nIdentify the weather station for which the median number of monthly sunshine hours over the months April to September was largest.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2.html#footnotes",
    "href": "Exercises/exercises2.html#footnotes",
    "title": "Exersice 2: Tidyverse",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercises2_SOLUTIONS.html",
    "href": "Exercises/exercises2_SOLUTIONS.html",
    "title": "II. Working with data in R (exercises)",
    "section": "",
    "text": "Create new Quarto document. For working on the exercise, create a new Quarto document with a descriptive name and save it where you can find it again, i.e. in the folder where you downloaded the teaching material. You can use the commands shown in presentation2.qmd to solve this exercise. There is no shame in outright copying from the presentation2.qmd script, provided you understand what the command is doing.\nLoad packages. You will need to load the packages tidyverse and readxl for this exercise.\n\n\nlibrary(tidyverse)\nlibrary(readxl)",
    "crumbs": [
      "Home",
      "Solutions",
      "Exercise 2 - Solution"
    ]
  },
  {
    "objectID": "Exercises/exercises2_SOLUTIONS.html#footnotes",
    "href": "Exercises/exercises2_SOLUTIONS.html#footnotes",
    "title": "II. Working with data in R (exercises)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Home",
      "Solutions",
      "Exercise 2 - Solution"
    ]
  },
  {
    "objectID": "Presentations/presentation5.html",
    "href": "Presentations/presentation5.html",
    "title": "V. Applied Statistics in R (presentation)",
    "section": "",
    "text": "The very basic structure of an R script doing a classical statistical analysis is as follows:\n\nLoad packages that you will be using.\n\nRead the dataset to be analyzed. Possibly also do some data cleaning and manipulation.\n\nVisualize the dataset by graphics and other descriptive statistics.\n\nFit and validate a statistical model.\n\nHypothesis testing. Possibly also post hoc testing.\n\nOf course there are variants of this set-up, and in practice there will often be some iterations of the steps.\nIn this manuscript, we will exemplify the proposed steps in the analysis of a simple dataset:\n\nIn our current scenario, you are a researcher investigating psoriasis, an inflammatory skin disease. You have data on the expression of a number genes that are suspected to have something to do with the disease, but you cannot be sure until you perform some formal statistical analysis.\nThis is a great example where R skills would come very handy!\nYou will start with your gene of special interest IGFL4. IGFL4 belongs to the insulin-like growth factor family of signaling molecules that play critical roles in cellular energy metabolism as well as in growth and development.\nYou decide that your analysis approach will be one-way ANOVA of the expression of the IGFL4 gene against the skin type in psoriasis patients.\n\n\n\nWe will use ggplot2 to make plots, and to be prepared for data manipulations, we simply load this together with the rest of the tidyverse.\nThe psoriasis data are provided in an Excel sheet, so we also load readxl. Finally, we will use the package emmeans to make post hoc tests.\nRemember that you should install the wanted packages before they can be used (but you only need to install the packages once!).\nThus,\n\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"emmeans\")\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(emmeans)\n\nNow, we are done preparing for our analyses. Next, we will look specifically at the possible association between IGFL4 gene expression and psoriasis.\nPlease refer to the ‘STATS CHEAT SHEET’ provided in the slides for hints as well as other cheat sheets provided in other sessions where necessary."
  },
  {
    "objectID": "Presentations/presentation5.html#structure-of-a-biostatistical-analysis-in-r",
    "href": "Presentations/presentation5.html#structure-of-a-biostatistical-analysis-in-r",
    "title": "V. Applied Statistics in R (presentation)",
    "section": "",
    "text": "The very basic structure of an R script doing a classical statistical analysis is as follows:\n\nLoad packages that you will be using.\n\nRead the dataset to be analyzed. Possibly also do some data cleaning and manipulation.\n\nVisualize the dataset by graphics and other descriptive statistics.\n\nFit and validate a statistical model.\n\nHypothesis testing. Possibly also post hoc testing.\n\nOf course there are variants of this set-up, and in practice there will often be some iterations of the steps.\nIn this manuscript, we will exemplify the proposed steps in the analysis of a simple dataset:\n\nIn our current scenario, you are a researcher investigating psoriasis, an inflammatory skin disease. You have data on the expression of a number genes that are suspected to have something to do with the disease, but you cannot be sure until you perform some formal statistical analysis.\nThis is a great example where R skills would come very handy!\nYou will start with your gene of special interest IGFL4. IGFL4 belongs to the insulin-like growth factor family of signaling molecules that play critical roles in cellular energy metabolism as well as in growth and development.\nYou decide that your analysis approach will be one-way ANOVA of the expression of the IGFL4 gene against the skin type in psoriasis patients.\n\n\n\nWe will use ggplot2 to make plots, and to be prepared for data manipulations, we simply load this together with the rest of the tidyverse.\nThe psoriasis data are provided in an Excel sheet, so we also load readxl. Finally, we will use the package emmeans to make post hoc tests.\nRemember that you should install the wanted packages before they can be used (but you only need to install the packages once!).\nThus,\n\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"emmeans\")\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(emmeans)\n\nNow, we are done preparing for our analyses. Next, we will look specifically at the possible association between IGFL4 gene expression and psoriasis.\nPlease refer to the ‘STATS CHEAT SHEET’ provided in the slides for hints as well as other cheat sheets provided in other sessions where necessary."
  },
  {
    "objectID": "Presentations/presentation5.html#example-analysis-of-variance",
    "href": "Presentations/presentation5.html#example-analysis-of-variance",
    "title": "V. Applied Statistics in R (presentation)",
    "section": "Example: Analysis of variance",
    "text": "Example: Analysis of variance\n\nStep 1: Data\nPsoriasis is an immune-mediated disease that affects the skin. You, as a researcher, carried out a micro-array experiment with skin from 37 people in order to examine a potential association between the disease and a certain gene (IGFL4). For each of the 37 samples the gene expression was measured. Fifteen skin samples were from psoriasis patients and from a part of the body affected by the disease (psor); 15 samples were from psoriasis patients but from a part of the body not affected by the disease (psne); and 7 skin samples were from healthy people (control).\nThe data are saved in the file psoriasis.xlsx. At first the variable named type (i.e. skin sample type) is stored as a character variable, we change it to a factor (and check that indeed there are 15, 15 and 7 skin samples in the three groups).\n\n# Read in the data from Excel file and call it psoriasisData\npsoriasisData &lt;- read_excel(\"../../Data/psoriasis.xlsx\")\n\n# View the top rows of the dataset\nhead(psoriasisData)\n\n# A tibble: 6 × 12\n  type  IGFL4 GeneA GeneB GeneC  GeneD GeneE GeneF GeneG   GeneH GeneI GeneJ\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 psne  0.841  2.94  3.16  4.21 -0.476  4.20 0.335  5.20  0.167   2.00  4.62\n2 psne  0.955  2.67  3.23  6.09  0.121  3.66 1.28   5.52  0.0580  2.06  4.35\n3 psne  1.07   2.53  2.80  4.48 -0.165  3.90 1.18   5.40 -0.202   1.95  2.57\n4 psne  1.11   3.56  2.53  4.97  0.139  2.92 0.744  4.98 -0.329   2.03  3.17\n5 psne  1.18   3.48  2.79  4.74 -0.102  3.04 0.513  5.48 -0.116   2.04  3.61\n6 psne  1.20   2.94  3.12  4.20 -0.200  3.46 0.472  3.95 -0.129   1.55  3.56\n\n# Extract the data of interest containing the IGFL4 expression levels and skin sample type from the dataset and call this subset psorData\npsorData  &lt;- select(psoriasisData, type, IGFL4)\n\n# View the top rows of the dataset psorData\n\n\n# Change variable named 'type' to factor so that we can use in our analysis in the next steps\n# First let's check if it is character\nis.character(psorData$type)\n\n[1] TRUE\n\n# Now change to factor\npsorData &lt;- mutate(psorData, type = factor(type))\n# Again, let's check if it is factor now\n\n\n# Check that there are 15, 15 and 7 skin samples in the three groups. Hint: count()\n\nQUESTION 1: According to your count summary table, are there 15 (psor), 15 (psne) and 7 (healthy) skin samples in the three groups? Please share your answer here: https://www.menti.com/alhf674h4r88\n\n\nStep 2: Descriptive plots and statistics\nTo get an impression of the data, we make two plots, and compute group-wise means and standard deviations. Make (1) a plot showing three groups of skin samples (healthy, psne, psor) and IGFL4 expression levels from each skin sample so that we can visually compare each group of samples with regards to IGLF4 expression levels; (2) a boxplot for the same group-wise comparison. And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: Consider using ggplot and tidyverse!\n\n# (1) a plot showing three groups of skin samples (healthy, psne, psor) and IGFL4 expression levels from each skin sample\nggplot(psorData, aes(x=type, y=IGFL4)) +\n  geom_point() + \n  labs(x=\"Skin type\", y=\"IGFL4\")\n\n\n\n\n\n\n\n# (2) a boxplot for the same group-wise comparison. Hint: geom_boxplot()\n\n\n# And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: group_by()\n\nQUESTION 2: Please rank the three groups by their mean/average IGFL4 expression (descending order). Just visually assess the values and write down the order of the groups. Please share your answer here: https://www.menti.com/alhf674h4r88\n\n\nStep 3: Fit of oneway ANOVA\nThe scientific question is whether the gene expression level of IGFL4 differs between the three types/groups. Thus, the natural type of analysis is a oneway analysis of variance (ANOVA). The oneway ANOVA is fitted with the lm() function in R. It is a good approach to assign a name (below oneway) to the object with the fitted model. This object contains all relevant information and may be used for subsequent analysis. Note that we need to logarithmic transform the response (i.e. IGFL4 expression levels) as intensities are often on a multiplicative scale.\n\n# oneway analysis of variance (ANOVA)\noneway &lt;- lm(log(IGFL4) ~ type, data=psorData)\n\n# View the model coefficients\n\nQUESTION 3: Are you done? Please share how you feel here: https://www.menti.com/aldoypm5u6wr\n\n\nStep 4: Hypothesis test + Post hoc tests\nIt is standard to carry out an \\(F\\)-test for the overall effect of the explanatory (i.e. independent) variable. To be precise, the hypothesis is that the expected values are the same in all groups. The most easy way to do this test is to use drop1. The option test=\"F\" is needed to get the \\(F\\)-test using that function:\n\n# Carry out an $F$-test for the overall effect of the explanatory (i.e. independent) variable\n\nQUESTION 4: What is your conclusion from the \\(F\\)-test result? Please share your answer here: https://www.menti.com/ali6bnwoiky7\nIt might be that the gene expression in two of the three groups may or may not be significantly different. To investigate that we do post hoc testing. This is nicely done within the framework of estimated marginal means using the emmeans package. Here emmeans makes the estimated marginal means (that is the predicted gene expression IGFL4 on the log scale), and the pairs() command provide post hoc pairwise comparisons (package automatically adjusts for multiple comparisons using the default tukey method):\n\n# Run emmeans\nemmeans(oneway,~type)\n\n type     emmean     SE df lower.CL upper.CL\n healthy  0.2791 0.0938 34   0.0885   0.4696\n psne     0.2963 0.0641 34   0.1662   0.4265\n psor    -0.0788 0.0641 34  -0.2090   0.0513\n\nResults are given on the log (not the response) scale. \nConfidence level used: 0.95 \n\n# Perform post hoc pairwise comparisons\n\nQUESTION 5: What is your conclusion from the pairwise comparisons? Please share your answer here: https://www.menti.com/ali6bnwoiky7"
  },
  {
    "objectID": "Presentations/presentation1.html",
    "href": "Presentations/presentation1.html",
    "title": "Presentation 1: Introduction",
    "section": "",
    "text": "I. The Fundamentals of R (R codes for presentation)\nCenter for Health Data Science, University of Copenhagen\nThese files are generated by the Quarto file presentation1.qmd",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#introduction",
    "href": "Presentations/presentation1.html#introduction",
    "title": "Presentation 1: Introduction",
    "section": "",
    "text": "I. The Fundamentals of R (R codes for presentation)\nCenter for Health Data Science, University of Copenhagen\nThese files are generated by the Quarto file presentation1.qmd",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#the-quarto-way",
    "href": "Presentations/presentation1.html#the-quarto-way",
    "title": "Presentation 1: Introduction",
    "section": "The Quarto Way!",
    "text": "The Quarto Way!\nThis section will go through how the Quarto format works and how to code in here.",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#this-is-the-second-largest-header-header-2",
    "href": "Presentations/presentation1.html#this-is-the-second-largest-header-header-2",
    "title": "Presentation 1: Introduction",
    "section": "This is the second largest header (Header 2)",
    "text": "This is the second largest header (Header 2)\n\nThis is the smallest header (Header 6)\nThis is normal text. Yes it is larger than the smallest header. A Quarto document works like a word document where we can write with bold or italic and insert thing like a table:\n\n\n\nMy friends\nTheir favorite drink\nTheir favorite food\n\n\n\n\nMicheal\nBeer\nBurger\n\n\nJane\nWine\nLasagne\n\n\nRobert\nWater\nSalad\n\n\n\n… a picture:\n\n\n\n\n\n\n\nThis is a cute cat\n\n\nWe can also make a list of things we like:\n\nCoffee\nCake\nWater\nFruit",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#modes-of-quarto",
    "href": "Presentations/presentation1.html#modes-of-quarto",
    "title": "Presentation 1: Introduction",
    "section": "Modes of Quarto",
    "text": "Modes of Quarto\nThere are two modes of Quarto: Source and Visual. The one that looks like Word is Visual. In the left part of the panel you can change to Source. If you have heard about Rmarkdown, the Source mode is essentially the same thing. Here you can see that headers are marked with hashtags. The more hashtags, the smaller the title. Some features can only be added when you are in Source mode. E.g write blue text is coded like this in the source code [write blue text\\]{style=\"color:blue\"}. We will only spend time in the Visual mode since it is the nicest to look at and we don’t need all of these fancy features in this course. Feel free to play around with it after the course!",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#code-chunks-and-structure",
    "href": "Presentations/presentation1.html#code-chunks-and-structure",
    "title": "Presentation 1: Introduction",
    "section": "Code chunks and structure",
    "text": "Code chunks and structure\nCode chunks are where the coding come in. Go to the very right of the panel and press the green box with the C. A grey code chunk will appear with ‘{r}’ in the beginning. This mean that it is an R code chunk. It is also possible to insert code chunks of other coding language, but we will stick to R since that is what we are here to learn. For executing the code, press the green button in the top right of the code chunk.\nIf you have ever worked with an R script, a code chunk is just like a part of an R script.\nBelow is a code chunk with a comment. A comment is a line that starts with a hashtag. Comments can be useful in longer code chunks and will often describe the code.\n\n# This is a comment. Here I can write whatever I want because it is in hashtags. \n\nBelow I try to write text in a code chuck. If I try to execute I will get an error because R is trying to interpret it as code and does not understand.\n\n# Text without hashtag gets errors when executed\n\nNB! Write executable code in the code chunks and execute it.\n\n1+3\n\n[1] 4\n\n\nYou can add comments above or to the right of the code. This will not influence the executing of the code.\n\n# Place a comment here \n1+3 # or place a comment here\n\n[1] 4",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#alter-output-of-code-chunks",
    "href": "Presentations/presentation1.html#alter-output-of-code-chunks",
    "title": "Presentation 1: Introduction",
    "section": "Alter output of code chunks",
    "text": "Alter output of code chunks\nYou don’t need this but it might be a good feature for your later R carrer.\nShow or hide code. echo=FALSE will hide the code and echo=TRUE will show the code. Default is TRUE.\nThe code (1+3) is not shown, but the result (4) is shown ({r echo=FALSE}):\n\n\n[1] 4\n\n\nControl whether code is executed. eval=FALSE not execute the code and eval=TRUE will execute the code. Default is TRUE.\nThe code (1+3) is shown, but the result (4) is not shown ({r eval=FALSE}):\n\n1+3\n\nControl messages, warnings and errors. Maybe you have a code chunk that you know will produce one of the three and you don’t want to look at it. It is not a good idea to hide these statements (especially the errors) before you know what they are. But in a report, it might be nice to be able to mute the messages or the warnings.\nWarning is not printed ({r message=FALSE, warning=FALSE, error=TRUE}):\n\nlog(-1)\n\n[1] NaN\n\n\nWarning is printed ({r message=TRUE, warning=TRUE, error=TRUE}):\n\nlog(-1)\n\nWarning in log(-1): NaNs produced\n\n\n[1] NaN",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#shortcuts",
    "href": "Presentations/presentation1.html#shortcuts",
    "title": "Presentation 1: Introduction",
    "section": "Shortcuts",
    "text": "Shortcuts\nSkip if you are overwhelmed!\nIf you want to look effortless while coding and impress you colleagues, have a look at the shortcuts. There are shortcuts for almost anything and you can find them (Tools –&gt; Keyboard Shortcuts Help) or change them to your own liking (Tools –&gt; Modify Keyboard Shortcuts…).\n\nRender: Making the report\nIn the panel there is a blue arrow and the word Render. Open the rendered html file in your browser and admire your work.\nLet’s get to coding!",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#working-directory",
    "href": "Presentations/presentation1.html#working-directory",
    "title": "Presentation 1: Introduction",
    "section": "Working directory",
    "text": "Working directory\nThe term ‘path’ refers to the trajectory you need to follow from the place you are “located” on your computer to the place you want to work from. When working with Quarto your working directory is always the same locations as your Quarto document. The working becomes important when we start loading data in from other places (presentation 2).\nWhere am I now?\n\ngetwd()\n\n[1] \"/Users/srz223/Desktop/DataLab/FromExceltoR/Teachers/Presentations\"\n\n\nSet working directory\nThe working directory can changed but when working with Quarto this only influences individual code chunks (which is mentioned in a warning when executing the code below). However it is really useful when working with raw R scripts which are taught in the upcoming R for data science (R part 2) course.\n\n# setwd('../Exercises/')\ngetwd()\n\n[1] \"/Users/srz223/Desktop/DataLab/FromExceltoR/Teachers/Presentations\"\n\n\nIn another chuck, the working directory is the same as before.\n\ngetwd()\n\n[1] \"/Users/srz223/Desktop/DataLab/FromExceltoR/Teachers/Presentations\"",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#variable-assignment",
    "href": "Presentations/presentation1.html#variable-assignment",
    "title": "Presentation 1: Introduction",
    "section": "Variable assignment",
    "text": "Variable assignment\nIn R we use an arrow for variable assignment. You may call your almost variables whatever you like. DO NOT: use special characters in variable names, i.e. &, ), $ etc. or make spaces in naming.\nThe first variable we create is ‘a’\n\na &lt;- 1\n\nNow we print ‘a’ and see what value it has\n\nprint(a)\n\n[1] 1\n\n\nWe check the class of a\n\nclass(a)\n\n[1] \"numeric\"\n\n\nLet’s create and other variable, b\n\nb &lt;- 3\n\nWe add a and b without reassignment and get the result printed\n\na + b \n\n[1] 4\n\n\nIf we want to save the result we have to reassign it to a new variable\n\nc &lt;- a + b\nprint(c)\n\n[1] 4\n\n\n… or overwrite an already existing variable. Here, a is “updated” to the sum of a and b. NB! Be careful with this.\n\na &lt;- a + b\nprint(a)\n\n[1] 4\n\n\nA vector of numbers named num1\n\nnum1 &lt;- c(5,1,11,6,4)\nnum1\n\n[1]  5  1 11  6  4\n\n\nFind the mean of the vector\n\n(5+1+11+6+4)/5\n\n[1] 5.4",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#functions-and-arguments",
    "href": "Presentations/presentation1.html#functions-and-arguments",
    "title": "Presentation 1: Introduction",
    "section": "Functions and Arguments",
    "text": "Functions and Arguments\nFunction are chunks of code wrapped in a way which makes the code inside reusable. A function takes an input(s) (arguments) and returns an output(s). You can make your own function but in this course you will only use the functions that are already available in the R packages.\nLet’s look at the mean() function\n\n?mean()\n\nTaking the mean of a vector\n\nmean(num1)\n\n[1] 5.4\n\n\nFunctions makes code reusable\n\nnum2 &lt;- c(0,3,4,9,1,2,7,10,2,11) # Define new vector\nmean(num2) # Print the mean of the vector \n\n[1] 4.9\n\n\nFind length of vector\n\nlength(num1)\n\n[1] 5\n\nlength(num2)\n\n[1] 10",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#simple-summary-statistics",
    "href": "Presentations/presentation1.html#simple-summary-statistics",
    "title": "Presentation 1: Introduction",
    "section": "Simple summary statistics",
    "text": "Simple summary statistics\nSummary statistics is information such as number of items, mean, median, standard deviation and sum.\nSummary statistics of a vector\n\nmean(num2)\n\n[1] 4.9\n\nmedian(num2)\n\n[1] 3.5\n\nsd(num2)\n\n[1] 4.012481\n\nsum(num2)\n\n[1] 49\n\nmin(num2)\n\n[1] 0\n\nmax(num2)\n\n[1] 11",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#r-packages",
    "href": "Presentations/presentation1.html#r-packages",
    "title": "Presentation 1: Introduction",
    "section": "R packages",
    "text": "R packages\nR packages are collections of functions written by R developers and super users and they make our lives much easier. Functions used in the same type of R analysis/pipeline are bundled and organized in packages. There is a help page for each package to tell us which functions it contains and which arguments go into these. In order to use a package we need to download and install it on our computer. Most R packages are stored and maintained on the CRAN[https://cran.r-project.org/mirrors.html%5D repository.\nInstall a package\n\n# install.packages('tidyverse')\n\nLoad packages\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nQuery package\n\n?tidyverse\n\nQuery function from package\n\n?dplyr::select",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#data-structures",
    "href": "Presentations/presentation1.html#data-structures",
    "title": "Presentation 1: Introduction",
    "section": "Data structures",
    "text": "Data structures\nIn the example below we will make two vectors into a tibble. Tibbles are the R object types you will mainly be working with in this course. We will try to convert between data types and structures using the collection of ‘as.’ functions.\nA vector of characters\n\npeople &lt;- c(\"Anders\", \"Diana\", \"Tugce\", \"Henrike\", \"Chelsea\", \"Valentina\", \"Thile\", \"Helene\")\npeople\n\n[1] \"Anders\"    \"Diana\"     \"Tugce\"     \"Henrike\"   \"Chelsea\"   \"Valentina\"\n[7] \"Thile\"     \"Helene\"   \n\n\nA vector of numeric values\n\njoined_year &lt;- c(2019, 2020, 2020, 2021, 2023, 2022, 2020, 2024)\njoined_year\n\n[1] 2019 2020 2020 2021 2023 2022 2020 2024\n\n\nAccess data type or structure with the class() function\n\nclass(people)\n\n[1] \"character\"\n\nclass(joined_year)\n\n[1] \"numeric\"\n\n\nConvert joined_year to character values\n\njoined_year &lt;- as.character(joined_year)\njoined_year\n\n[1] \"2019\" \"2020\" \"2020\" \"2021\" \"2023\" \"2022\" \"2020\" \"2024\"\n\nclass(joined_year)\n\n[1] \"character\"\n\n\nConvert joined_year back to numeric values\n\njoined_year &lt;- as.numeric(joined_year)\njoined_year\n\n[1] 2019 2020 2020 2021 2023 2022 2020 2024\n\n\nConvert classes with the ‘as.’ functions\n\n# as.numeric()\n# as.integer()\n# as.character()\n# as.factor()\n# ...\n\nLet’s make a tibble from two vectors\n\nmy_data &lt;- tibble(name = people, \n                  joined_year = joined_year)\n\nmy_data\n\n# A tibble: 8 × 2\n  name      joined_year\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Anders           2019\n2 Diana            2020\n3 Tugce            2020\n4 Henrike          2021\n5 Chelsea          2023\n6 Valentina        2022\n7 Thile            2020\n8 Helene           2024\n\nclass(my_data)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nJust like you can convert between different data types, you can convert between data structures/objects.\nConvert tibble to dataframe\n\nmy_data2 &lt;- as.data.frame(my_data)\nclass(my_data2)\n\n[1] \"data.frame\"\n\n\nConvert classes with the ‘as.’ functions\n\n# as.data.frame()\n# as.matrix()\n# as.list()\n# as.table()\n# ...\n# as_tibble()",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "Presentations/presentation1.html#fundamental-operations",
    "href": "Presentations/presentation1.html#fundamental-operations",
    "title": "Presentation 1: Introduction",
    "section": "Fundamental operations",
    "text": "Fundamental operations\nYou can inspect an R objects in different ways:\n1. Simply call it and it will be printed to the console. 2. With large object it is preferable to use `head()` or `tail()` to only see the first or last part. 3. To see the data in a tabular excel style format you can use `view()`\nLook at the “head” of an object\n\nhead(my_data, n = 4)\n\n# A tibble: 4 × 2\n  name    joined_year\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Anders         2019\n2 Diana          2020\n3 Tugce          2020\n4 Henrike        2021\n\n\nOpen up tibble as a table (Excel style)\n\nview(my_data)\n\ndim(), short for dimensions, which returns the number of rows and columns of an R object\n\ndim(my_data)\n\n[1] 8 2\n\n\nLook at a single column from a tibble using the ‘$’ symbol\n\nmy_data$joined_year\n\n[1] 2019 2020 2020 2021 2023 2022 2020 2024",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 1: Introduction"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FromExceltoR",
    "section": "",
    "text": "This course is about going from Excel to R.\nCourse participants, it would greatly help us if fill out our feedback form [UPDATE] (March 2024): https://forms.office.com/e/4RL8XE0s2C\nThe course material is originally made by Professor Helle Sørensen and Associate Professor Bo Markussen, SCIENCE data lab, Department of Mathematical Sciences at the University of Copenhagen. Contact: helle@math.ku.dk or bomar@math.ku.dk.\nThe introduction presentation is made by, and the course material is edited by Thilde Terkelsen, Academic officer, Center for Health Data Science, Faculty of Health and Medical Sciences, University of Copenhagen. Contact: thilde.terkelsen@sund.ku.dk or andrejeva@sund.ku.dk\nThe material in this repository is for teaching purposes only and not to be distributed commercially."
  },
  {
    "objectID": "index.html#welcome-to-the-main-page",
    "href": "index.html#welcome-to-the-main-page",
    "title": "FromExceltoR",
    "section": "",
    "text": "This course is about going from Excel to R.\nCourse participants, it would greatly help us if fill out our feedback form [UPDATE] (March 2024): https://forms.office.com/e/4RL8XE0s2C\nThe course material is originally made by Professor Helle Sørensen and Associate Professor Bo Markussen, SCIENCE data lab, Department of Mathematical Sciences at the University of Copenhagen. Contact: helle@math.ku.dk or bomar@math.ku.dk.\nThe introduction presentation is made by, and the course material is edited by Thilde Terkelsen, Academic officer, Center for Health Data Science, Faculty of Health and Medical Sciences, University of Copenhagen. Contact: thilde.terkelsen@sund.ku.dk or andrejeva@sund.ku.dk\nThe material in this repository is for teaching purposes only and not to be distributed commercially."
  },
  {
    "objectID": "index.html#program",
    "href": "index.html#program",
    "title": "FromExceltoR",
    "section": "Program",
    "text": "Program"
  },
  {
    "objectID": "index.html#code-memes",
    "href": "index.html#code-memes",
    "title": "FromExceltoR",
    "section": "Code memes",
    "text": "Code memes"
  },
  {
    "objectID": "Presentations/video_test.html",
    "href": "Presentations/video_test.html",
    "title": "Video test",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Presentations/video_test.html#my-first-quarto-document",
    "href": "Presentations/video_test.html#my-first-quarto-document",
    "title": "Video test",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Presentations/video_test.html#adding-numbers-together",
    "href": "Presentations/video_test.html#adding-numbers-together",
    "title": "Video test",
    "section": "Adding numbers together",
    "text": "Adding numbers together\nDefine variables\n\na = 1\nb = 3\n\nLook at the variables\n\nprint(a)\n\n[1] 1\n\nprint(b)\n\n[1] 3\n\n\nMaking a new variable, c, which is the sum of a and b\n\n# This line will not be excecuted because of the hashtag\nc = a + b \n\nLook at the newly defined variable, c\n\nprint(c)\n\n[1] 4"
  },
  {
    "objectID": "Presentations/presentation2.html",
    "href": "Presentations/presentation2.html",
    "title": "Presentation 2: Tidyverse",
    "section": "",
    "text": "# Load tidyverse package\nlibrary(tidyverse)\n# Load a package that can read excel files\nlibrary(readxl)",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#load-packages",
    "href": "Presentations/presentation2.html#load-packages",
    "title": "Presentation 2: Tidyverse",
    "section": "",
    "text": "# Load tidyverse package\nlibrary(tidyverse)\n# Load a package that can read excel files\nlibrary(readxl)",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#check-working-directory",
    "href": "Presentations/presentation2.html#check-working-directory",
    "title": "Presentation 2: Tidyverse",
    "section": "Check working directory",
    "text": "Check working directory\nCheck working directory so you know from where you work.\n\ngetwd()\n\n[1] \"/Users/srz223/Desktop/DataLab/FromExceltoR/Teachers/Presentations\"",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#importing-data",
    "href": "Presentations/presentation2.html#importing-data",
    "title": "Presentation 2: Tidyverse",
    "section": "Importing data",
    "text": "Importing data\nOften we will work with large datasets that already exist in i.e. an excel sheet or a tab separated file (.tsv). We can easily load that data into R, either with the read_excel function or by clicking on ‘Import Dataset’ in the Environment tab (right). We can also load data in via a command. Let’s do this now. Navigate to the data from your working directory. Use the tap-button to check what your options are.\n\ncrohns &lt;- read_excel(\"../../Data/crohns_disease.xlsx\")",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#a-first-look-at-the-data",
    "href": "Presentations/presentation2.html#a-first-look-at-the-data",
    "title": "Presentation 2: Tidyverse",
    "section": "A first look at the data",
    "text": "A first look at the data\nPrint first few lines of your dataset\n\nhead(crohns) \n\n# A tibble: 6 × 9\n     ID nrAdvE   BMI height country sex     age weight treat  \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n1 19908      4  25.2    163 c1      F        47     67 placebo\n2 19909      4  23.8    164 c1      F        53     64 d1     \n3 19910      1  23.0    164 c1      F        68     62 placebo\n4 20908      1  25.7    165 c1      F        48     70 d2     \n5 20909      2  26.0    170 c1      F        67     75 placebo\n6 20910      2  28.7    168 c1      F        54     81 d1     \n\n\nGet the dimension of your dataset\n\ndim(crohns)\n\n[1] 117   9\n\n\nHow many observations (rows) do have?\n\nnrow(crohns)\n\n[1] 117\n\n\nHow many data columns are there and what are their types? Both ‘str’ and ‘summary’ will you what column types you have. Summary has some extra summary stats on numeric columns.\n\nsummary(crohns)\n\n       ID            nrAdvE            BMI            height     \n Min.   :19908   Min.   : 0.000   Min.   :16.00   Min.   :124.0  \n 1st Qu.:23909   1st Qu.: 0.000   1st Qu.:23.05   1st Qu.:157.0  \n Median :25919   Median : 1.000   Median :25.15   Median :162.0  \n Mean   :34103   Mean   : 2.034   Mean   :26.06   Mean   :162.7  \n 3rd Qu.:51909   3rd Qu.: 3.000   3rd Qu.:28.40   3rd Qu.:166.0  \n Max.   :54937   Max.   :12.000   Max.   :44.06   Max.   :182.0  \n   country              sex                 age            weight      \n Length:117         Length:117         Min.   :19.00   Min.   : 36.00  \n Class :character   Class :character   1st Qu.:48.00   1st Qu.: 59.00  \n Mode  :character   Mode  :character   Median :56.00   Median : 68.00  \n                                       Mean   :54.66   Mean   : 69.03  \n                                       3rd Qu.:62.00   3rd Qu.: 76.00  \n                                       Max.   :75.00   Max.   :117.00  \n    treat          \n Length:117        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\nstr(crohns)\n\ntibble [117 × 9] (S3: tbl_df/tbl/data.frame)\n $ ID     : num [1:117] 19908 19909 19910 20908 20909 ...\n $ nrAdvE : num [1:117] 4 4 1 1 2 2 3 0 1 0 ...\n $ BMI    : num [1:117] 25.2 23.8 23.1 25.7 25.9 ...\n $ height : num [1:117] 163 164 164 165 170 168 161 168 154 157 ...\n $ country: chr [1:117] \"c1\" \"c1\" \"c1\" \"c1\" ...\n $ sex    : chr [1:117] \"F\" \"F\" \"F\" \"F\" ...\n $ age    : num [1:117] 47 53 68 48 67 54 53 53 47 58 ...\n $ weight : num [1:117] 67 64 62 70 75 81 69 74 76 82 ...\n $ treat  : chr [1:117] \"placebo\" \"d1\" \"placebo\" \"d2\" ...",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#the-anatomy-of-tidyverse",
    "href": "Presentations/presentation2.html#the-anatomy-of-tidyverse",
    "title": "Presentation 2: Tidyverse",
    "section": "The anatomy of tidyverse",
    "text": "The anatomy of tidyverse\nTidyverse is a collection of R packages that are great for data wrangling and visualizations. Tidyverse is often coded in a specific syntax that we will go through now.\n\nThe name of the new object you are creating. Can omit if you don’t want to save the result.\nThe dataset we are working on.\nThe function you want to perform on the dataset.\n\nIn tidyverse we use the pipe symbol %&gt;%. Always make a new line after the pipe symbol for good structure.\n\n# new_object &lt;- dataset %&gt;%\n#   function1(arguments...) %&gt;% \n#   function2(arguments...)",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#count-distinct-sort",
    "href": "Presentations/presentation2.html#count-distinct-sort",
    "title": "Presentation 2: Tidyverse",
    "section": "Count, distinct, sort",
    "text": "Count, distinct, sort\nCount and distinct are very useful to get information about your dataset!\nVariables (columns) can be numeric or categorical (characters, factors). Use the str() function to see the structure of your dataset.\n\ncrohns %&gt;%\n  str()\n\ntibble [117 × 9] (S3: tbl_df/tbl/data.frame)\n $ ID     : num [1:117] 19908 19909 19910 20908 20909 ...\n $ nrAdvE : num [1:117] 4 4 1 1 2 2 3 0 1 0 ...\n $ BMI    : num [1:117] 25.2 23.8 23.1 25.7 25.9 ...\n $ height : num [1:117] 163 164 164 165 170 168 161 168 154 157 ...\n $ country: chr [1:117] \"c1\" \"c1\" \"c1\" \"c1\" ...\n $ sex    : chr [1:117] \"F\" \"F\" \"F\" \"F\" ...\n $ age    : num [1:117] 47 53 68 48 67 54 53 53 47 58 ...\n $ weight : num [1:117] 67 64 62 70 75 81 69 74 76 82 ...\n $ treat  : chr [1:117] \"placebo\" \"d1\" \"placebo\" \"d2\" ...\n\n\ndistinct() tells us how many different levels a categorical variable has.\n\n# How many different treatments do we have? \ncrohns %&gt;%\n  distinct(treat)\n\n# A tibble: 3 × 1\n  treat  \n  &lt;chr&gt;  \n1 placebo\n2 d1     \n3 d2     \n\n# How many different treatments do we have?\ncrohns %&gt;%\n  distinct(treat)\n\n# A tibble: 3 × 1\n  treat  \n  &lt;chr&gt;  \n1 placebo\n2 d1     \n3 d2     \n\n#From how many different countries do we have data?\ncrohns %&gt;%\n  distinct(country)\n\n# A tibble: 2 × 1\n  country\n  &lt;chr&gt;  \n1 c1     \n2 c2     \n\n\ncount() does tabulation of categorical variables. Total number of lines, i.e. patients in the current dataset. Observe, this matches with the number of lines you can see in the Environment tab.\n\ncrohns %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   117\n\n\n\n# How many lines, i.e. patients do we have per treatment?\ncrohns %&gt;% \n  count(treat)\n\n# A tibble: 3 × 2\n  treat       n\n  &lt;chr&gt;   &lt;int&gt;\n1 d1         39\n2 d2         39\n3 placebo    39\n\n# Is our dataset balanced?\n\n# How many patients do we have for each age?\ncrohns %&gt;% \n  count(age)\n\n# A tibble: 43 × 2\n     age     n\n   &lt;dbl&gt; &lt;int&gt;\n 1    19     1\n 2    28     1\n 3    29     1\n 4    30     1\n 5    33     1\n 6    35     1\n 7    36     1\n 8    38     1\n 9    39     3\n10    40     2\n# ℹ 33 more rows\n\n# Perhaps this is more useful: How many patients are older than 65?\ncrohns %&gt;% \n  count(age &gt; 65)\n\n# A tibble: 2 × 2\n  `age &gt; 65`     n\n  &lt;lgl&gt;      &lt;int&gt;\n1 FALSE         96\n2 TRUE          21\n\n\nNote we haven’t saved anything here, we just get output to the console sorted in a certain way. This helps us to check if the data looks correct and get an impression.",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#filtering-data-selecting-rows-with-filter",
    "href": "Presentations/presentation2.html#filtering-data-selecting-rows-with-filter",
    "title": "Presentation 2: Tidyverse",
    "section": "Filtering data (selecting rows) with filter()",
    "text": "Filtering data (selecting rows) with filter()\nHow we subset dataset into subsets we find interesting. For example only female patients:\n\ncrohns %&gt;% \n  filter(sex == 'F') # processed from left to right\n\n# A tibble: 100 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19908      4  25.2    163 c1      F        47     67 placebo\n 2 19909      4  23.8    164 c1      F        53     64 d1     \n 3 19910      1  23.0    164 c1      F        68     62 placebo\n 4 20908      1  25.7    165 c1      F        48     70 d2     \n 5 20909      2  26.0    170 c1      F        67     75 placebo\n 6 20910      2  28.7    168 c1      F        54     81 d1     \n 7 21908      3  26.6    161 c1      F        53     69 d1     \n 8 21909      0  26.2    168 c1      F        53     74 placebo\n 9 21910      1  32.0    154 c1      F        47     76 d2     \n10 21911      0  33.3    157 c1      F        58     82 placebo\n# ℹ 90 more rows\n\n\nA great about tidyverse: write code the way you think. You always filter by defining conditions. If the condition evaluates to ‘TRUE’ the line is included. See only data lines for patients over 65:\n\ncrohns %&gt;% \n  filter(age &gt; 65)\n\n# A tibble: 21 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19910      1  23.0    164 c1      F        68     62 placebo\n 2 20909      2  26.0    170 c1      F        67     75 placebo\n 3 22908      5  18.2    159 c1      F        66     46 d2     \n 4 22909      8  30.8    156 c1      M        71     75 placebo\n 5 22911      3  24.8    182 c1      M        68     82 d2     \n 6 22914      3  25.2    157 c1      F        75     62 d2     \n 7 24912      0  25.2    162 c1      F        69     66 placebo\n 8 25920      1  27.9    164 c1      F        69     75 d1     \n 9 26908      0  25.8    150 c1      F        73     58 d1     \n10 26910      0  19.1    165 c1      F        66     52 d1     \n# ℹ 11 more rows\n\n\nFrom the above commands we are getting the result printed to the console. This is useful to check something. To save the result, we need to re-assign:\n\nseniors &lt;- crohns %&gt;% \n  filter(age &gt; 65)\n\nView newly created data frame:\n\nseniors\n\n# A tibble: 21 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19910      1  23.0    164 c1      F        68     62 placebo\n 2 20909      2  26.0    170 c1      F        67     75 placebo\n 3 22908      5  18.2    159 c1      F        66     46 d2     \n 4 22909      8  30.8    156 c1      M        71     75 placebo\n 5 22911      3  24.8    182 c1      M        68     82 d2     \n 6 22914      3  25.2    157 c1      F        75     62 d2     \n 7 24912      0  25.2    162 c1      F        69     66 placebo\n 8 25920      1  27.9    164 c1      F        69     75 d1     \n 9 26908      0  25.8    150 c1      F        73     58 d1     \n10 26910      0  19.1    165 c1      F        66     52 d1     \n# ℹ 11 more rows\n\n\nDo we still have all three treatment groups in our subset?\n\nseniors %&gt;%\n  count(treat)\n\n# A tibble: 3 × 2\n  treat       n\n  &lt;chr&gt;   &lt;int&gt;\n1 d1          6\n2 d2          5\n3 placebo    10",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#the-world-of-conditional-operators",
    "href": "Presentations/presentation2.html#the-world-of-conditional-operators",
    "title": "Presentation 2: Tidyverse",
    "section": "The world of conditional operators",
    "text": "The world of conditional operators\nNow we get lines that fit certain conditions but what if I want to filter on more than one condition? Enter conditional operators!\nThe ‘and’ operator: &\nWe can also subset on several conditions. Here are younger patients who received drug 1:\n\ncrohns %&gt;% \n  filter(age &lt;= 65 & treat == 'd1')\n\n# A tibble: 33 × 9\n      ID nrAdvE   BMI height country sex     age weight treat\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1 19909      4  23.8    164 c1      F        53     64 d1   \n 2 20910      2  28.7    168 c1      F        54     81 d1   \n 3 21908      3  26.6    161 c1      F        53     69 d1   \n 4 21916      0  23.9    177 c1      M        56     75 d1   \n 5 22916      2  30.9    163 c1      F        53     82 d1   \n 6 23908      0  30.4    158 c1      F        55     76 d1   \n 7 23909      0  23.4    156 c1      F        44     57 d1   \n 8 23910      0  26.7    156 c1      F        59     65 d1   \n 9 23912      0  16      150 c1      F        28     36 d1   \n10 24909      0  22.5    155 c1      F        52     54 d1   \n# ℹ 23 more rows\n\n\nThe ‘or’ operator: |\nGet patients that were treated with either drug 1 or the placebo:\n\ncrohns %&gt;% \n  filter(treat == 'placebo' | treat == 'd1')\n\n# A tibble: 78 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19908      4  25.2    163 c1      F        47     67 placebo\n 2 19909      4  23.8    164 c1      F        53     64 d1     \n 3 19910      1  23.0    164 c1      F        68     62 placebo\n 4 20909      2  26.0    170 c1      F        67     75 placebo\n 5 20910      2  28.7    168 c1      F        54     81 d1     \n 6 21908      3  26.6    161 c1      F        53     69 d1     \n 7 21909      0  26.2    168 c1      F        53     74 placebo\n 8 21911      0  33.3    157 c1      F        58     82 placebo\n 9 21914      6  28.4    170 c1      M        58     82 placebo\n10 21916      0  23.9    177 c1      M        56     75 d1     \n# ℹ 68 more rows\n\n\nThe ‘not’ operator: !\n\ncrohns %&gt;% \n  filter(treat != 'placebo')\n\n# A tibble: 78 × 9\n      ID nrAdvE   BMI height country sex     age weight treat\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1 19909      4  23.8    164 c1      F        53     64 d1   \n 2 20908      1  25.7    165 c1      F        48     70 d2   \n 3 20910      2  28.7    168 c1      F        54     81 d1   \n 4 21908      3  26.6    161 c1      F        53     69 d1   \n 5 21910      1  32.0    154 c1      F        47     76 d2   \n 6 21912      5  32.5    152 c1      F        63     75 d2   \n 7 21913      2  37.6    159 c1      F        54     95 d2   \n 8 21915      0  23.0    160 c1      F        54     59 d2   \n 9 21916      0  23.9    177 c1      M        56     75 d1   \n10 21917      0  36.4    164 c1      F        51     98 d2   \n# ℹ 68 more rows\n\n\nOther conditional operators can be found in the first presentation or when querying the function (or just google it).\n\n?dplyr::filter\n\nYou can also allow multiple arguments in a variable. Here are the young patients who got treatment with either drug 1 or 2:\n\ncrohns %&gt;% \n  filter(age &lt;= 65 & treat %in% c(\"d1\",\"d2\"))\n\n# A tibble: 67 × 9\n      ID nrAdvE   BMI height country sex     age weight treat\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1 19909      4  23.8    164 c1      F        53     64 d1   \n 2 20908      1  25.7    165 c1      F        48     70 d2   \n 3 20910      2  28.7    168 c1      F        54     81 d1   \n 4 21908      3  26.6    161 c1      F        53     69 d1   \n 5 21910      1  32.0    154 c1      F        47     76 d2   \n 6 21912      5  32.5    152 c1      F        63     75 d2   \n 7 21913      2  37.6    159 c1      F        54     95 d2   \n 8 21915      0  23.0    160 c1      F        54     59 d2   \n 9 21916      0  23.9    177 c1      M        56     75 d1   \n10 21917      0  36.4    164 c1      F        51     98 d2   \n# ℹ 57 more rows",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#selecting-variables-columns-with-select",
    "href": "Presentations/presentation2.html#selecting-variables-columns-with-select",
    "title": "Presentation 2: Tidyverse",
    "section": "Selecting variables (columns) with select()",
    "text": "Selecting variables (columns) with select()\nWe can choose to only include certain columns. Here, we select only BMI, age and the number of adverse events:\n\ncrohns %&gt;% \n  select(nrAdvE, BMI, age)\n\n# A tibble: 117 × 3\n   nrAdvE   BMI   age\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1      4  25.2    47\n 2      4  23.8    53\n 3      1  23.0    68\n 4      1  25.7    48\n 5      2  26.0    67\n 6      2  28.7    54\n 7      3  26.6    53\n 8      0  26.2    53\n 9      1  32.0    47\n10      0  33.3    58\n# ℹ 107 more rows\n\n\nWe can also make a negative selection that excludes the named column(s). The ID doesn’t give us any information since the data is anonymized:\n\nwithout_id &lt;- crohns %&gt;% \n  select(-ID)\n\nWe have saved the dataset without the ID column in at new variable. Let’s have a look at this:\n\nwithout_id\n\n# A tibble: 117 × 8\n   nrAdvE   BMI height country sex     age weight treat  \n    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1      4  25.2    163 c1      F        47     67 placebo\n 2      4  23.8    164 c1      F        53     64 d1     \n 3      1  23.0    164 c1      F        68     62 placebo\n 4      1  25.7    165 c1      F        48     70 d2     \n 5      2  26.0    170 c1      F        67     75 placebo\n 6      2  28.7    168 c1      F        54     81 d1     \n 7      3  26.6    161 c1      F        53     69 d1     \n 8      0  26.2    168 c1      F        53     74 placebo\n 9      1  32.0    154 c1      F        47     76 d2     \n10      0  33.3    157 c1      F        58     82 placebo\n# ℹ 107 more rows",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#transformation-of-data-with-mutate",
    "href": "Presentations/presentation2.html#transformation-of-data-with-mutate",
    "title": "Presentation 2: Tidyverse",
    "section": "Transformation of data with mutate()",
    "text": "Transformation of data with mutate()\nWe can create new columns based on other columns with the mutate() function.\nThis is our original tibble:\n\ncrohns\n\n# A tibble: 117 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19908      4  25.2    163 c1      F        47     67 placebo\n 2 19909      4  23.8    164 c1      F        53     64 d1     \n 3 19910      1  23.0    164 c1      F        68     62 placebo\n 4 20908      1  25.7    165 c1      F        48     70 d2     \n 5 20909      2  26.0    170 c1      F        67     75 placebo\n 6 20910      2  28.7    168 c1      F        54     81 d1     \n 7 21908      3  26.6    161 c1      F        53     69 d1     \n 8 21909      0  26.2    168 c1      F        53     74 placebo\n 9 21910      1  32.0    154 c1      F        47     76 d2     \n10 21911      0  33.3    157 c1      F        58     82 placebo\n# ℹ 107 more rows\n\n\nWe want to add height in meters in a new column. It is important to reassign the dataframe if you want to save the new column.\n\ncrohns &lt;- crohns %&gt;% \n  mutate(height_m = height/100)\n\ncrohns\n\n# A tibble: 117 × 10\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n\n\nWe can also create columns based on TRUE/FALSE conditions. According to the CDC, a person with a BMI &lt; 18.5 is underweight:\n\ncrohns &lt;- crohns %&gt;% \n  mutate(underweight = ifelse(BMI &lt; 18.5, \"Yes\", \"No\"))\n\ncrohns\n\n# A tibble: 117 × 11\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n# ℹ 1 more variable: underweight &lt;chr&gt;\n\n\nHow many patients are underweight?\n\ncrohns %&gt;%\n  count(underweight)\n\n# A tibble: 2 × 2\n  underweight     n\n  &lt;chr&gt;       &lt;int&gt;\n1 No            113\n2 Yes             4\n\n\nHave a look at the mutate() function:\n\n?mutate",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#summary-statistics-revisited-with-summarize",
    "href": "Presentations/presentation2.html#summary-statistics-revisited-with-summarize",
    "title": "Presentation 2: Tidyverse",
    "section": "Summary statistics, revisited with summarize()",
    "text": "Summary statistics, revisited with summarize()\nMethods from before:\n\nmean(crohns$age)\n\n[1] 54.65812\n\nmax(crohns$age)\n\n[1] 75\n\nsummary(crohns)\n\n       ID            nrAdvE            BMI            height     \n Min.   :19908   Min.   : 0.000   Min.   :16.00   Min.   :124.0  \n 1st Qu.:23909   1st Qu.: 0.000   1st Qu.:23.05   1st Qu.:157.0  \n Median :25919   Median : 1.000   Median :25.15   Median :162.0  \n Mean   :34103   Mean   : 2.034   Mean   :26.06   Mean   :162.7  \n 3rd Qu.:51909   3rd Qu.: 3.000   3rd Qu.:28.40   3rd Qu.:166.0  \n Max.   :54937   Max.   :12.000   Max.   :44.06   Max.   :182.0  \n   country              sex                 age            weight      \n Length:117         Length:117         Min.   :19.00   Min.   : 36.00  \n Class :character   Class :character   1st Qu.:48.00   1st Qu.: 59.00  \n Mode  :character   Mode  :character   Median :56.00   Median : 68.00  \n                                       Mean   :54.66   Mean   : 69.03  \n                                       3rd Qu.:62.00   3rd Qu.: 76.00  \n                                       Max.   :75.00   Max.   :117.00  \n    treat              height_m     underweight       \n Length:117         Min.   :1.240   Length:117        \n Class :character   1st Qu.:1.570   Class :character  \n Mode  :character   Median :1.620   Mode  :character  \n                    Mean   :1.627                     \n                    3rd Qu.:1.660                     \n                    Max.   :1.820                     \n\n\nThe summarize() function does the same but in a tidyverse way and gives the result in a table which you can export and send to your colleagues.\n\ncrohns %&gt;% \n  summarize(mean(age),\n            max(age))\n\n# A tibble: 1 × 2\n  `mean(age)` `max(age)`\n        &lt;dbl&gt;      &lt;dbl&gt;\n1        54.7         75\n\n\nWe can also specify names for the new columns:\n\ncrohns %&gt;% \n  summarize(mean_age = mean(age),\n            max_age = max(age))\n\n# A tibble: 1 × 2\n  mean_age max_age\n     &lt;dbl&gt;   &lt;dbl&gt;\n1     54.7      75\n\n\nWhat kind of things can you summarize? Have a look at the help by typing ?summarize into the console, or ‘summarize’ into the help panel and scroll down to ‘Useful functions’.\nA useful summarize function is n() which counts the number of lines.\n\ncrohns %&gt;% \n  summarize(mean_age = mean(age),\n            max_age = max(age),\n            number_lines = n())\n\n# A tibble: 1 × 3\n  mean_age max_age number_lines\n     &lt;dbl&gt;   &lt;dbl&gt;        &lt;int&gt;\n1     54.7      75          117\n\n\nNote that R is tolerant of BE/AE spelling differences. summarise() and summarize() are the same function, likewise with color and colour.",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#grouping-with-group_by",
    "href": "Presentations/presentation2.html#grouping-with-group_by",
    "title": "Presentation 2: Tidyverse",
    "section": "Grouping with group_by()",
    "text": "Grouping with group_by()\nThe function group_by() imposes a grouping on a tibble. Group according to sex:\n\ncrohns %&gt;%\n  group_by(sex)\n\n# A tibble: 117 × 11\n# Groups:   sex [2]\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n# ℹ 1 more variable: underweight &lt;chr&gt;\n\n\nWe can also group according to several variables. How many groups will we get?\n\ncrohns %&gt;%\n  group_by(sex, treat)\n\n# A tibble: 117 × 11\n# Groups:   sex, treat [6]\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n# ℹ 1 more variable: underweight &lt;chr&gt;\n\n\nBy itself, group_by does nothing, we still get the same dataset returned. But it is very useful in combination with other commands! The reason we want to do it this is way is that we can first impose grouping with group_by() and then pipe, %&gt;%, the resulting tibble into summarize which will respect our grouping. So smart!\n\ncrohns %&gt;%                      # the dataset\n  group_by(sex) %&gt;%             # grouped by sex\n  summarise(avg = mean(age),    # calculate mean of the age\n            med = median(age),  # calc median\n            stdev = sd(age),    # calc standard dev.\n            n = n())            # get the number of observations\n\n# A tibble: 2 × 5\n  sex     avg   med stdev     n\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 F      54.7    55  10.8   100\n2 M      54.3    56  10.4    17\n\n\nNow we see why n() is useful: It tells us how many lines, i.e. patients are in each group.\nGroup by sex and treatment, and calculate stats for the number of adverse events.\n\ncrohns %&gt;%                              # the dataset\n  group_by(sex, treat) %&gt;%              # grouped by sex\n  summarise(avg = mean(nrAdvE),         # calculate mean number of adverse events\n            med = median(nrAdvE),       # calc median\n            max = max(nrAdvE),          # calc max \n            stdev = sd(nrAdvE),         # calc standard dev.\n            total_events = sum(nrAdvE), # calc cumulative sum \n            n = n())                    # get the number of observations\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 6 × 8\n# Groups:   sex [2]\n  sex   treat     avg   med   max stdev total_events     n\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 F     d1       1.5      0     7  2.08           51    34\n2 F     d2       2.12     1     9  2.71           72    34\n3 F     placebo  2.16     1    12  3.09           69    32\n4 M     d1       2        0     9  3.94           10     5\n5 M     d2       2.2      2     6  2.49           11     5\n6 M     placebo  3.57     3     8  3.41           25     7",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#the-might-of-the-pipe-operator",
    "href": "Presentations/presentation2.html#the-might-of-the-pipe-operator",
    "title": "Presentation 2: Tidyverse",
    "section": "The might of the pipe operator: %>%",
    "text": "The might of the pipe operator: %&gt;%\nMany commands can be combined with the pipe operator to pipe data through an analysis workflow.\n\ncrohns %&gt;%                              # the dataset\n  filter(age &gt; 65) %&gt;%                  # filtered to only people over 65\n  group_by(sex, treat) %&gt;%              # Grouping \n  summarise(avg = mean(nrAdvE),         # calculate mean number of adverse events\n            med = median(nrAdvE),       # calc median\n            max = max(nrAdvE),          # calc max \n            stdev = sd(nrAdvE),         # calc standard dev.\n            total_events = sum(nrAdvE), # calc cumulative sum \n            n = n()) %&gt;%                # get the number of observations\n  arrange(avg)                          # Sort output by the mean\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 5 × 8\n# Groups:   sex [2]\n  sex   treat     avg   med   max stdev total_events     n\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 F     d1       1.83   0.5     6  2.56           11     6\n2 F     placebo  2.22   1      12  3.73           20     9\n3 F     d2       3      3       5  2               9     3\n4 M     d2       4.5    4.5     6  2.12            9     2\n5 M     placebo  8      8       8 NA               8     1\n\n\nWhat if I want to do the same analysis but with only obese patients? The CDC lists a BMI of &gt; 30 as obese.",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html",
    "href": "Presentations/presentation4.html",
    "title": "Presentation 3: ggplot2",
    "section": "",
    "text": "library(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#importing-libraries-and-data",
    "href": "Presentations/presentation4.html#importing-libraries-and-data",
    "title": "Presentation 3: ggplot2",
    "section": "",
    "text": "library(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#load-data",
    "href": "Presentations/presentation4.html#load-data",
    "title": "Presentation 3: ggplot2",
    "section": "Load data",
    "text": "Load data\nThe iris dataset is a widely-used dataset in data science, containing 150 observations of iris flowers with features like sepal length, sepal width, petal length, and petal width. It includes three species: Setosa, Versicolor, and Virginica, making it ideal for classification tasks and data visualization.\n\ndata('iris')\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n# some R code",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#data-wranglig",
    "href": "Presentations/presentation4.html#data-wranglig",
    "title": "Presentation 3: ggplot2",
    "section": "Data wranglig",
    "text": "Data wranglig\nMaking the data more fun to plot.\n\n# Define 5 colors and their respective ratios\nset.seed(123)  # For reproducibility\ncolors &lt;- c(rep(\"Red\", 50),       # 50 rows with Red\n            rep(\"Blue\", 30),      # 30 rows with Blue\n            rep(\"Yellow\", 30),    # 30 rows with Yellow\n            rep(\"Green\", 20),     # 20 rows with Green\n            rep(\"Purple\", 20))    # 20 rows with Purple\n\n# Shuffle the colors to mix them randomly\ncolors &lt;- sample(colors)\n\n# Add the 'Flower.Color' column to the iris dataset\niris$Flower.Color &lt;- colors\n\n# View the first few rows to check the result\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species Flower.Color\n1          5.1         3.5          1.4         0.2  setosa          Red\n2          4.9         3.0          1.4         0.2  setosa          Red\n3          4.7         3.2          1.3         0.2  setosa        Green\n4          4.6         3.1          1.5         0.2  setosa          Red\n5          5.0         3.6          1.4         0.2  setosa       Purple\n6          5.4         3.9          1.7         0.4  setosa       Purple",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#ggplot2-the-basic-concepts",
    "href": "Presentations/presentation4.html#ggplot2-the-basic-concepts",
    "title": "Presentation 3: ggplot2",
    "section": "ggplot2: The basic concepts",
    "text": "ggplot2: The basic concepts\nThis is the starting point of a ggplot. The dataframe and the columns we wish to plot are defined. We have not specified what type of plot we want, hence an empty plot is produced.\n\nggplot(iris,                    # dataframe \n       aes(x = Sepal.Length,    # x-value\n           y = Sepal.Width))    # y-value\n\n\n\n\n\n\n\n                                # missing type of plot",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#scatter-plot-with-geom_point",
    "href": "Presentations/presentation4.html#scatter-plot-with-geom_point",
    "title": "Presentation 3: ggplot2",
    "section": "Scatter plot with geom_point",
    "text": "Scatter plot with geom_point\nA scatter plot is made with the geom_point function and is used to get an overview over the relationship between two numeric variables. Here we see the relationship between sepal length and width.\n\nggplot(iris,                    # dataframe \n       aes(x = Sepal.Length,    # x-value\n           y = Petal.Length)) + # y-value\n  geom_point()                  # type of plot\n\n\n\n\n\n\n\n\nChange color of entire plot by setting it outside aes().\n\nggplot(iris,                    \n       aes(x = Sepal.Length,    \n           y = Petal.Length)) + \n  geom_point(color = 'hotpink')",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#scatter-plot-with-geom_point-with-color-stratification",
    "href": "Presentations/presentation4.html#scatter-plot-with-geom_point-with-color-stratification",
    "title": "Presentation 3: ggplot2",
    "section": "Scatter plot with geom_point with color stratification",
    "text": "Scatter plot with geom_point with color stratification\nTo change colors based on a feature, you need to set it inside aes(). Here we see the relationship between sepal length and width colored by species.\n\nggplot(iris,                   \n       aes(x = Sepal.Length,   \n           y = Petal.Length,     \n           color = Species)) +  \n  geom_point()",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#boxplot-with-geom_histogram",
    "href": "Presentations/presentation4.html#boxplot-with-geom_histogram",
    "title": "Presentation 3: ggplot2",
    "section": "Boxplot with geom_histogram",
    "text": "Boxplot with geom_histogram\nBoxplots are great to get an overview of continues variables and spot outliers. Can be shown on either axis (x and y).\n\nggplot(iris,                    \n       aes(y = Sepal.Length)) + \n  geom_boxplot() \n\n\n\n\n\n\n\n\nSplit up by categorical variable like Species:\n\nggplot(iris,                    \n       aes(y = Sepal.Length,    \n           x = Species)) +      \n  geom_boxplot()              \n\n\n\n\n\n\n\n\n… or color.\n\nggplot(iris,                    \n       aes(y = Sepal.Length,    \n           fill = Species)) +  \n  geom_boxplot()",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#violin-plot-with-geom_violin",
    "href": "Presentations/presentation4.html#violin-plot-with-geom_violin",
    "title": "Presentation 3: ggplot2",
    "section": "Violin plot with geom_violin",
    "text": "Violin plot with geom_violin\nA violin plot shows the distribution of a continuous variable across different categories, combining the features of a box plot and a density plot. Also, the labels can be edited.\n\nggplot(iris,                    \n       aes(y = Sepal.Length,    \n           x = Species)) +      \n  geom_violin() + \n  labs(y = 'Sepal Length', \n       x = 'Flower Species', \n       title = 'Violin plot of sepal length stratisfied by flower species')",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#histogram-with-geom_histogram",
    "href": "Presentations/presentation4.html#histogram-with-geom_histogram",
    "title": "Presentation 3: ggplot2",
    "section": "Histogram with geom_histogram",
    "text": "Histogram with geom_histogram\nHistogram shows the distribution of a continuous variable. You will sometimes get a message that suggests to select another binwidth. Do what is says and you will often get nicer plot (something nothing changes).\n\nggplot(iris,                    \n       aes(x = Sepal.Length)) +     \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n  # geom_histogram(binwidth = 0.5)",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#bar-chart-with-geom_bar",
    "href": "Presentations/presentation4.html#bar-chart-with-geom_bar",
    "title": "Presentation 3: ggplot2",
    "section": "Bar chart with geom_bar",
    "text": "Bar chart with geom_bar\nA bar chart is made with the geom_bar function and is used to get an overview over the distribution of a single categorical variable, e.g. Flower.Color in this instance. Here we see the number of flowers of each Flower.Color. Notice that the Flower.Colors are sorted alphabetically.\n\n# Save plot in p\np &lt;- ggplot(iris,                    \n            aes(x = Flower.Color)) + \n  geom_bar()                         \n\n# Show p\np\n\n\n\n\n\n\n\n# Show p with new labels \np + labs(x = 'Flower Color', y = 'Count')\n\n\n\n\n\n\n\n# Show p (nothing has changed)\np\n\n\n\n\n\n\n\n# Save p with new lables in p (overwrite / reassign)\np &lt;- p + labs(x = 'Flower Color', y = 'Count')\n\n# Show p (lables have changed)\np \n\n\n\n\n\n\n\n\nColor by species. The bars are stacked by default.\n\nggplot(iris,                    \n       aes(x = Flower.Color,   \n           fill = Species)) +   \n  geom_bar()                   \n\n\n\n\n\n\n\n\nAdd position = \"dodge\" for bars to be placed next to each other.\n\nggplot(iris,                   \n      aes(x = Flower.Color,    \n          fill = Species)) +   \n  geom_bar(position = \"dodge\") \n\n\n\n\n\n\n\n\nAdd position = \"fill\" for bars to be normalized such that heights of the bars to represent percentages rather than counts.\n\nggplot(iris,                   \n      aes(x = Flower.Color,   \n          fill = Species)) +   \n  geom_bar(position = \"fill\") + \n  theme_bw()\n\n\n\n\n\n\n\n  # theme_classic()  \n  # theme_minimal()\n  # theme_dark()\n\nUsing facet_wrap if you want a plot to be split up according to a categorical variable.\n\nggplot(iris,                   \n      aes(x = Flower.Color)) +\n  geom_bar()  + \n  facet_wrap(vars(Species))",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#extra-section",
    "href": "Presentations/presentation4.html#extra-section",
    "title": "Presentation 3: ggplot2",
    "section": "Extra section",
    "text": "Extra section\n(Should we exclude this? Is it too advanced? Is it used in the exercises?) We can order the columns such that the count goes from lowest to highest. This is actually not that easy in R.\nFirst, we see that the class of the Flower.Color is character. Characters are always sorted alphabetically like we saw above.\n\nclass(iris$Flower.Color)\n\n[1] \"character\"\n\n\nExtract the number of flowers for each Flower.Color.\n\ndl_Flower.Color &lt;- iris %&gt;%\n  group_by(Flower.Color) %&gt;%\n  summarise(n = n()) %&gt;% \n  arrange(desc(n))\n\ndl_Flower.Color\n\n# A tibble: 5 × 2\n  Flower.Color     n\n  &lt;chr&gt;        &lt;int&gt;\n1 Red             50\n2 Blue            30\n3 Yellow          30\n4 Green           20\n5 Purple          20\n\ndl_Flower.Color$Flower.Color\n\n[1] \"Red\"    \"Blue\"   \"Yellow\" \"Green\"  \"Purple\"\n\n\nChange the class of the Flower.Color feature to factor and add levels according to the number of flowers with each color.\n\niris$Flower.Color &lt;- factor(iris$Flower.Color,\n                            levels = dl_Flower.Color$Flower.Color)\n\nCheck class now\n\nclass(iris$Flower.Color)\n\n[1] \"factor\"\n\n\nNow we do the same plot as before and we see that the order has changed to range from largest to smallest Flower.Colors group. The plot is saved in the variable p.\n\np &lt;- ggplot(iris,                # dataframe \n       aes(x = Flower.Color)) +  # x-value\n  geom_bar()                     # type of plot \n\np\n\n\n\n\n\n\n\n\nWe can also flip the chart. We update the plot, p, be reassignment.\n\np &lt;- p + coord_flip()\n\nSince we are working with colors, we can change the colors of the bars to match the groups.\n\n# Define color palette\ncolor_palette &lt;- c(\"Red\" = \"red\", \n                   \"Blue\" = \"blue\", \n                   \"Yellow\" = \"yellow\", \n                   \"Green\" = \"green\", \n                   \"Purple\" = \"purple\")\n\np &lt;- p + \n  aes(fill = Flower.Color) +                # add the fill ascetics \n  scale_fill_manual(values = color_palette) # set the fill color according to the color palette",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#bar-chart-with-geom_col",
    "href": "Presentations/presentation4.html#bar-chart-with-geom_col",
    "title": "Presentation 3: ggplot2",
    "section": "Bar chart with geom_col",
    "text": "Bar chart with geom_col\nSummary of data:\n\nmean_sepal_length_pr_color &lt;- iris %&gt;%\n  group_by(Flower.Color) %&gt;%\n  summarize(mean_Sepal.Length = mean(Sepal.Length))\n\nhead(mean_sepal_length_pr_color)\n\n# A tibble: 5 × 2\n  Flower.Color mean_Sepal.Length\n  &lt;fct&gt;                    &lt;dbl&gt;\n1 Red                       5.91\n2 Blue                      6.02\n3 Yellow                    5.75\n4 Green                     5.92\n5 Purple                    5.48\n\n\nA bar chart with geom_bar is used to get an overview over the distribution of a categorical variable relative to a continues variable. Here we see the average Sepal.Length of the flowers for each Flower.Color.\n\nggplot(mean_sepal_length_pr_color,   # dataframe \n       aes(x = Flower.Color,         # x-value\n           y = mean_Sepal.Length)) + # y-value\n  geom_col()                         # type of plot",
    "crumbs": [
      "Home",
      "Presentations",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html",
    "href": "Exercises/exercises1.html",
    "title": "Exersice 1: Introduction",
    "section": "",
    "text": "Start RStudio.\nMake a new Quarto document. Go to the menu bar and click File → New file… → Quarto document…. Give the Quarto document a title that makes sense to you.\nSave your document. Go to the menu bar and click File → Save as….\nCheck the working directory. Let’s check which working directory we are in with the getwd() function. When working with Quarto documents the working directory is always the same as where the file is located (where you saved it).",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#getting-started",
    "href": "Exercises/exercises1.html#getting-started",
    "title": "Exersice 1: Introduction",
    "section": "",
    "text": "Start RStudio.\nMake a new Quarto document. Go to the menu bar and click File → New file… → Quarto document…. Give the Quarto document a title that makes sense to you.\nSave your document. Go to the menu bar and click File → Save as….\nCheck the working directory. Let’s check which working directory we are in with the getwd() function. When working with Quarto documents the working directory is always the same as where the file is located (where you saved it).",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#write-commands-at-the-prompt",
    "href": "Exercises/exercises1.html#write-commands-at-the-prompt",
    "title": "Exersice 1: Introduction",
    "section": "Write commands at the prompt",
    "text": "Write commands at the prompt\n\nGo to the R console (lower left window) and write a few commands, one at a time. You could for example try these commands:\n\n\n6*12\nx &lt;- 100\nx + 7\n\nNotice how a new object, x, appears in the Global Environment window (upper right window) and can be used for new computations.\nCommands written at the prompt are not saved for later use! It is fine to write commands that should never be used again at the prompt, and it is fine “to play at the prompt”, but in general you must organize your commands in R scripts (or Quarto files, which will be introduced in Lesson IV).",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#working-with-quarto-documents",
    "href": "Exercises/exercises1.html#working-with-quarto-documents",
    "title": "Exersice 1: Introduction",
    "section": "Working with Quarto Documents",
    "text": "Working with Quarto Documents\nTo save your code, you need to store it in a file. There are several file formats available for this purpose, and in this course, we are using Quarto, the latest format in the code reproducibility domain.\n\nCreate code chunk. In the Quarto document you just made, create a code chuck by pressing the green box with the white ‘C’ in the right of the panel.\nWrite code. Write a command in the code chunk, similar to one of those from above.\nRun code. Click on the green button in the top right of the code chunk - or simply type Ctrl + Enter/option + Enter. Then the command is transferred to the prompt in the console and executed, just as if you had written the command directly at the prompt. Try with a new command in a new line.\nCreate a comment. Put a hashtag (#) before one of the commands in the code chunk and run it. Nothing happens! Hence, you can use hashtags for writing comments in your code chunks.\nSave your files often. It happens that you ask R for something so weird that it shuts down, and then it is a pity to have lost your work.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#r-packages",
    "href": "Exercises/exercises1.html#r-packages",
    "title": "Exersice 1: Introduction",
    "section": "R Packages",
    "text": "R Packages\nR is born with a lot of functionalities, but the enormous community of R users also contributes to R all the time by developing code and sharing it in R packages. An R package is simply a collection of R functions and/or datasets (including documentation). As of September 20, 2024, there are 21,361 packaged available at the CRAN repository (and there are many other repositories).\nAn R package needs be installed and loaded before you can use its functionalities. You only have to install a package once (until you re-install R), whereas you have to load it in every R session you want to use it. As an example, let’s install the package ContaminatedMixt.\n\nInstall. Choose one of the two installation methods:\n\n\n\nUsing the command line:\n\n\ninstall.packages(\"ContaminatedMixt\")\n\nNote that for this approach you need to know the name of the package and spell it correctly, including capitalization!\n\nUsing the graphical interface:\nLook at lower right of your Rstudio window where you have a window with several tabs. Click on Packages. You will see a list of your currently installed packages and their versions. To install ContaminatedMixt, click on Install and start to type the name. You will notice a drop down list appears from which you can select the correct package. This is useful if you are not quite sure of the correct spelling.\n\nA lot of red text will be written in the console while the installation goes on. This usually does not mean there was a problem, unless the text reads ‘error’ or ‘exit’. In the end, the package is installed, or you will see an explanation of what went wrong.\n\nLoading. Load the package you just installed with the command library(ContaminatedMixt). If everything went well, you should now able to run the command data(package = 'ContaminatedMixt') which will show you an overview of the datasets included in the package.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#basic-r-commands",
    "href": "Exercises/exercises1.html#basic-r-commands",
    "title": "Exersice 1: Introduction",
    "section": "Basic R commands",
    "text": "Basic R commands\nWe will now have a look at basic commands in R that you just learned about. We will use an in-build dataset of R called trees. Copy-paste the commands into your document or write them yourself to get a hang of the coding! Start thinking about the structure of you document and when to create new code chunks.\n\nTo start with, load the tidyverse package.\n\n\nlibrary(tidyverse)\n\n\nNow, load the trees dataset by copying and executing the following commands:\n\n\ndata(\"trees\")\nview(trees)\n?trees\n\n\nCheck what information is contained in the trees dataset by calling the summary function on it:\n\n\nsummary(trees)\n\n\nHow many trees do we have data for?\nNow, extract the column called Volume from the dataset and assign it to a new variable called volume_col.\nDisplay the volume of the first 10 trees.\nFind the minimum, maximum and mean volume from the column you just extracted. Does it match what was stated in the summary?\nWhat class of data structure is trees? Make it into a tibble.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#making-some-graphics",
    "href": "Exercises/exercises1.html#making-some-graphics",
    "title": "Exersice 1: Introduction",
    "section": "Making some graphics",
    "text": "Making some graphics\nNext, let’s also try to make some plots using the base graphics system in R (in Presentation III you will learn to make graphics using the ggplot2-package). We will continue to use the trees dataset.\n\nThe dataset trees contains 31 observations of 3 variables (diameter, height and volume of black cherry trees). Insert the following two commands in a code chunk, and execute them to make two plots.\n\n\nplot(Volume~Height, data=trees)\nplot(Volume~Height, data=trees, log=\"y\")",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#shut-down-r",
    "href": "Exercises/exercises1.html#shut-down-r",
    "title": "Exersice 1: Introduction",
    "section": "Shut down R",
    "text": "Shut down R\n\nClose RStudio. If changes were made either to the Quarto document (shown in the upper-left window) or to the workspace (called ‘Global Environment’ in the upper-right window) you will be prompted if you like to save those. Answer Yes to that; in particular it is important that you save your documents as they contain all relevant commands to reproduce your output and plots.\nReopen file. Locate the Quarto document that you saved in question 4 (and question 10!). Start RStudio again, and open the file (via the File menu). Check that you can run it again.\n\nRemark - You can also start RStudio by double clicking on a file with the .qmd extension (or other R-readable formats). One advantage of this is that the workspace and the R history will be saved to the same folder as the R script when you later close RStudio, since the working directory will be set to the map where the file is located.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#getting-help-in-r",
    "href": "Exercises/exercises1.html#getting-help-in-r",
    "title": "Exersice 1: Introduction",
    "section": "Getting help in R",
    "text": "Getting help in R\nEvery R function comes with a help page, that gives a brief description of the function and describes its usage (input/arguments and output/value). Let’s use the function median() as example. It is, no surprise, computing the median from a vector of numbers.\n\nTry these commands:\n\n\nx &lt;- c(1, 3, 8, 9, 100, NA)\nx\nmedian(x)\n\nThe first command defines a vector with six elements, but where the last number is missing (NA = Not Available). Since the last number is missing, median returns NA. However, could we make median find the median of the remaining numbers. Perhaps the help page can help out!\n\nLook at the help for the median function:\n\n\n?median\n\nThe help page for median appears in the lower right window. If we read it carefully, then we realize that the extra argument (input) na.rm may help us. We therefore try this:\n\nmedian(x, na.rm=TRUE)\n\nAdmittedly, R help pages are often quite difficult to read, but be aware that there are examples of commands in the bottom of each help page. For more complicated functions, these examples can be very useful while trying to get to know the function and its functionalities.\nIn order to use the help pages as above, you need to know the name of the function, which obviously may not be the case: You want to compute the median but have no idea what function to use. The best way to proceed: Google! Use “R whatever-you-want-to-search-for”, and you often get exactly what you need.\nWhile working with R, you will get a lot of error messages. Some are easy to understand, and you will readily be able to fix the problems, while others… Again, the best answer is: Google and ChatGPT! Copy the error message into Google or ChatGPT, and you will often find help.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#wrapping-up",
    "href": "Exercises/exercises1.html#wrapping-up",
    "title": "Exersice 1: Introduction",
    "section": "Wrapping up",
    "text": "Wrapping up\n\nImagine you need to send your code to a collaborator. Review your code to ensure it is clear and well-structured, so your collaborator can easily understand and follow your work.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises1.html#lessons-learnt",
    "href": "Exercises/exercises1.html#lessons-learnt",
    "title": "Exersice 1: Introduction",
    "section": "Lessons learnt",
    "text": "Lessons learnt\n\nYou must write you code in a document, like the Quarto document, such that you can save the work and return to it some other day.\nSave your files often.\nIf you forget to save your files before you close RStudio, then RStudio will prompt you if you want to save your work.\nHave structure in your document by using headers, text, and code chunks (maybe with comments).",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 1: Introduction"
    ]
  },
  {
    "objectID": "Exercises/exercises4_SOLUTIONS.html",
    "href": "Exercises/exercises4_SOLUTIONS.html",
    "title": "VI. Graphics with ggplot2 (exercises)",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\nlibrary(tidyverse)\nlibrary(readxl)\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\nclimate &lt;- read_xlsx('../Data/climate.xlsx')\nhead(climate)\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf",
    "crumbs": [
      "Home",
      "Solutions",
      "Exercise 3 - Solution"
    ]
  },
  {
    "objectID": "Exercises/exercises4_SOLUTIONS.html#footnotes",
    "href": "Exercises/exercises4_SOLUTIONS.html#footnotes",
    "title": "VI. Graphics with ggplot2 (exercises)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Home",
      "Solutions",
      "Exercise 3 - Solution"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html",
    "href": "Exercises/exercises4.html",
    "title": "Exercise 3: ggplot2",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#getting-started",
    "href": "Exercises/exercises4.html#getting-started",
    "title": "Exercise 3: ggplot2",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#scatter-plot-i",
    "href": "Exercises/exercises4.html#scatter-plot-i",
    "title": "Exercise 3: ggplot2",
    "section": "Scatter plot I",
    "text": "Scatter plot I\n\nMake a scatter (point) plot of rain against sun.\nColor the points in the scatter plot according to weather station. Save the plot in an object.\nAdd the segment + facet_wrap(vars(station)) to the saved plot object from above, and update the plot. What happens?\nIs it necessary to have a legend in the faceted plot? How can you remove this legend? Hint: try adding a theme() with legend.position = \"none\" inside it.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#graphic-files",
    "href": "Exercises/exercises4.html#graphic-files",
    "title": "Exercise 3: ggplot2",
    "section": "Graphic files",
    "text": "Graphic files\n\nUse ggsave(file=\"weather.jpeg\") to remake the last ggplot as a jpeg-file and save it. The file will be saved on your working directory. Locate this file on your computer and open it.\nUse ggsave(file=\"weather.png\", width=10, height=8, units=\"cm\") to remake the last ggplot as a png-file and save it. What do the three other options do? Look at the help page ?ggsave to get an overview of the possible options.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#scatter-plot-ii-error-bars",
    "href": "Exercises/exercises4.html#scatter-plot-ii-error-bars",
    "title": "Exercise 3: ggplot2",
    "section": "Scatter plot II: error bars",
    "text": "Scatter plot II: error bars\n\nCalculate the average and standard deviation for sunshine in each month and save it to a table called summary_stats. You will need group_by and summarize. Recall how to do this from the tidyverse exercise.\nMake a scatter plot of the summary_stats with month on the x-axis, and the average number of sunshine hours on the y-axis.\nAdd error bars to the plot, which represent the average number of sunshine hours plus/minus the standard deviation of the observations. The relevant geom is called geom_errorbar.\n\nHint:\n\ngeom_errorbar(aes(ymin = sun_avg - sun_sd, ymax = sun_avg + sun_sd), width = 0.2)\n\n\nHow could make the plot with horizontal error bars instead? Tip: Think about which of the two variables, month and average sunshine hours, can meaningfully have an error.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#line-plot-also-known-as-a-spaghetti-plot",
    "href": "Exercises/exercises4.html#line-plot-also-known-as-a-spaghetti-plot",
    "title": "Exercise 3: ggplot2",
    "section": "Line plot (also known as a spaghetti plot)",
    "text": "Line plot (also known as a spaghetti plot)\n\nMake a line plot (find the correct geom_ for this) of the rainfall observations over time (month), such that observations from the same station are connected in one line. Put month on the x-axis. Color the lines according to weather station as well.\nThe month variable was read into R as a numerical variable. Convert this variable to a factor and make the line plot again. What has changed?\nUse theme(legend.position = ???) to move the color legend to the top of the plot.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#layering",
    "href": "Exercises/exercises4.html#layering",
    "title": "Exercise 3: ggplot2",
    "section": "Layering",
    "text": "Layering\nWe can add several geoms to the same plot to show several things at once.\n\n(Re)Make the line plot of monthly rainfall and add geom_point() to it.\nNow, add geom_hline(yintercept = mean(climate$rain), linetype = \"dashed\") at the end of your code for the line plot, and update the plot again. Have a look at the code again and understand what it does and how. What do you think ‘h’ in hline stands for?\nFinally, try adding the following code and update the plot. What changed? Replace X, Y, COL, and TITLE with some more suitable (informative) text.\n\n\nlabs(x = \"X\", y = \"Y\", color = \"COL\", title = \"TITLE\")",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#box-plot-i",
    "href": "Exercises/exercises4.html#box-plot-i",
    "title": "Exercise 3: ggplot2",
    "section": "Box plot I",
    "text": "Box plot I\n\nMake a box plot of sunshine per weather station.\nColor the boxes according to weather station.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#box-plot-ii---aesthetics",
    "href": "Exercises/exercises4.html#box-plot-ii---aesthetics",
    "title": "Exercise 3: ggplot2",
    "section": "Box plot II - Aesthetics",
    "text": "Box plot II - Aesthetics\nThere are many ways in which you can manipulate the look of your plot. For this we will use the boxplot you made in the exercise above.\n\nAdd a different legend title with labs(fill = \"Custom Title\").\nChange the theme of the ggplot grid. Suggestions: theme_minimal(), theme_bw(), theme_dark(), theme_void().\nInstead of automatically chosen colors, pick your own colors for fill = station by adding the scale_fill_manual() command. You will need five colors, one for each station. What happens if you choose too few colors?\nChange the boxplot to a violin plot. Add the sunshine observations as scatter points to the plot. Include a boxplot inside the violin plot with geom_boxplot(width=.1).",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#histogram",
    "href": "Exercises/exercises4.html#histogram",
    "title": "Exercise 3: ggplot2",
    "section": "Histogram",
    "text": "Histogram\n\nMake a histogram (find the correct geom_ for this) of rain from the climate dataset. Interpret the plot, what does it show?\nR suggests that you choose a different number of bins/bin width for the histogram. Use binwidth = inside the histogram geom to experiment with different values of bin width. Look at how the histogram changes.\nColor the entire histogram. Here we are not coloring/filling according to any attribute, just the entire thing so the argument needs to be outside aes().",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#bar-chart-i",
    "href": "Exercises/exercises4.html#bar-chart-i",
    "title": "Exercise 3: ggplot2",
    "section": "Bar chart I",
    "text": "Bar chart I\n\nMake a bar chart (geom_col()) which visualizes the sunshine hours per month. If you have not done so in question 13, convert month to a factor now and remake the plot.\nColor, i.e. divide the bars according to weather station.\nFor better comparison, place the bars for each station next to each other instead of stacking them.\nMake the axis labels, legend title, and title of the plot more informative by customizing them like you did for the line plot above.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#bar-chart-ii-sorting-bars",
    "href": "Exercises/exercises4.html#bar-chart-ii-sorting-bars",
    "title": "Exercise 3: ggplot2",
    "section": "Bar chart II: Sorting bars",
    "text": "Bar chart II: Sorting bars\n\nMake a new bar chart showing the (total) annual rainfall recorded at each weather station. You will need to calculate this first. The format we need is a dataframe with summed up rain data per station.\nSort the stations in accordance to rainfall, either ascending or descending. This was shown in the ggplot lecture. Sort your rain dataframe from the question above by sum, then re-arrange the factor-levels of the ‘station’ as shown in the lecture.\nAdd labels to each bar that state the sum of the rainfall. You can do this by adding the label keyword to the aes() and adding geom_label() to the plot. Just like geoms like geom_scatter look at the aes() for knowing what to plot on the x and y axis, geom_label looks at it to know what to use for labels.\nAdjust the label positions so that the labels are positioned above the bars instead of inside them.",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercises4.html#footnotes",
    "href": "Exercises/exercises4.html#footnotes",
    "title": "Exercise 3: ggplot2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Home",
      "Exercises",
      "Exercise 3: ggplot2"
    ]
  }
]