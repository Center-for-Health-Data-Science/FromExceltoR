expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
gather() %>%
mutate(key = as.factor(key))
expr10
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey90", bins=10) +
facet_wrap(~key, scales = 'free_x')
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
gather() %>%
mutate(key = as.factor(key), value = as.integer(value))
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey90", bins=10) +
facet_wrap(~key, scales = 'free_x')
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
gather() %>%
mutate(key = as.factor(key), value = as.integer(value))
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey90", bins=10) +
facet_wrap(~key)
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
gather() %>%
mutate(key = as.factor(key), value = as.integer(value))
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey90", bins=10) +
facet_wrap(~key)
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
gather() %>%
mutate(key = as.factor(key), value = as.integer(value))
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="white", bins=10) +
facet_wrap(~key)
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
gather()
#%>%
#mutate(key = as.factor(key), value = as.integer(value))
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="white", bins=10) +
theme_bw() +
facet_wrap(~key)
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey80", bins=10) +
theme_bw() +
facet_wrap(~key)
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="darkblue", bins=10) +
theme_bw() +
facet_wrap(~key)
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="seagreen", bins=10) +
theme_bw() +
facet_wrap(~key)
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey80", bins=10) +
theme_minimal() +
facet_wrap(~key)
install.packages("DEseq2")
BiocManager::install("DEseq2")
BiocManager::install("DEseq2")
BiocManager::install("DESeq2")
exprDat
library(limma)
library(DESeq2)
library(DESeq2)
resPV$name %>%
unique() %>%
length()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("~/Desktop/HeaDS/GeneExpressDat/presentation6funcs.R")
setwd("~/Desktop/HeaDS/GeneExpressDat")
resPV$name %>%
unique() %>%
length()
exprDat <- read_delim("GSE60450_Lactation-GenewiseCounts.txt", delim = "\t")
exprInfo <- read_delim("SampleInfo_Corrected.txt", delim = "\t")
# Give it a look
exprDat
dim(exprDat)
exprInfo
exprGenes <- exprDat %>%
dplyr::select(EntrezGeneID, Length) %>%
mutate(EntrezGeneID = as.character(EntrezGeneID))
#exprGenes
exprDat <- exprDat %>%
dplyr::select(-EntrezGeneID, -Length) %>%
rename_at(vars(names(.)), ~exprInfo$SampleName)
#exprDat
exprInfo <- exprInfo %>%
mutate(CellType = factor(CellType),
Status = factor(Status, levels = c("virgin", "pregnant", "lactate")),
TypeStatus = factor(paste(CellType, Status, sep = '.')))
#exprInfo
ensembl <- useMart("ensembl",dataset="mmusculus_gene_ensembl")
attributes <- listAttributes(ensembl)
IDs <- getBM(attributes=c('entrezgene_id', 'mgi_symbol'), filters = 'entrezgene_id', values = unique(exprGenes$EntrezGeneID), mart = ensembl) %>%
as_tibble() %>% dplyr::rename(EntrezGeneID = entrezgene_id) %>%
mutate(EntrezGeneID = as.character(EntrezGeneID))
IDs
dim(IDs)
dim(exprDat)
MoreSym <- duplicated(IDs$EntrezGeneID) %>%
which() %>%
length()
MoreSym
IDs <- IDs %>%
group_by(EntrezGeneID) %>%
mutate(key = paste0('mgi_symbol_', row_number())) %>%
spread(key, mgi_symbol) %>%
unite("mgi_symbol", mgi_symbol_1:mgi_symbol_7, sep= ",", na.rm = TRUE, remove = TRUE)
exprGenes <- exprGenes %>%
left_join(., IDs) %>%
mutate(name=ifelse(!is.na(mgi_symbol), mgi_symbol, EntrezGeneID))
# Check if we fixed the issues with dimensions:
dim(exprGenes)
dim(exprDat)
expr1 <- gather(exprDat) %>%
dplyr::select(value) %>%
mutate(valuelog2 = log2(value+1))
exprDat <- exprDat %>%
mutate(nzeros = rowSums(.==0))
keep <- which(exprDat$nzeros <= 8)
exprDat <- exprDat[keep,] %>%
dplyr::select(-nzeros)
exprGenes <- exprGenes[keep,]
#How many genes do we have left:
dim(exprDat)
dim(exprGenes)
exprDat <- as.data.frame(exprDat)
rownames(exprDat) <- exprGenes$EntrezGeneID
exprObj <- DESeqDataSetFromMatrix(countData = exprDat,
colData = exprInfo,
rowData = exprGenes,
design= ~CellType+Status)
exprObj
colSums(assay(exprObj))
boxplot(assay(exprObj))
boxplot(log2(assay(exprObj)))
plotPCA(exprObj,intgroup=c("Status"))
exprObj <- vst(exprObj,blind=TRUE)
boxplot(assay(exprObj), xlab="", ylab="Log2 counts per million",las=2)
plotPCA(exprObj,intgroup=c("Status"))
plotPCA(exprObj,intgroup=c("CellType"))
plotPCA(exprObj,intgroup=c("TypeStatus"))
exprObj <- DESeqDataSetFromMatrix(countData = exprDat,
colData = exprInfo,
rowData = exprGenes,
design= ~CellType+Status)
exprObj <- DESeq(exprObj)
sizeFactors(exprObj)
resultsNames(exprObj)
resLV <- results(exprObj, contrast = c("Status", "lactate", "virgin"), independentFiltering = FALSE)
resLV <- SigDE(resLV, "resLV", exprGenes, 1.0, 0.01)
resLV
resPV <- results(exprObj, contrast = c("Status", "pregnant", "virgin"),  independentFiltering = FALSE)
#DESeq2::plotMA(resPV)
#summary(resPV)
resPV <- SigDE(resPV, "resPV", exprGenes, 1.0, 0.01)
resLP <- results(exprObj, contrast = c("Status", "lactate", "pregnant"),  independentFiltering = FALSE)
#DESeq2::plotMA(resLP)
#summary(resLP)
resLP <- SigDE(resLP, "resLP", exprGenes, 1.0, 0.01)
resPV$name %>%
unique() %>%
length()
resLV$name %>%
unique() %>%
length()
resLP$name %>%
unique() %>%
length()
resALL <- bind_rows(resPV, resLV, resLP)
resALL
resALL <- bind_rows(resPV, resLV, resLP)
dplyr::select(name)
resALL <- bind_rows(resPV, resLV, resLP)
dplyr::select(Length)
resALL
resALL <- bind_rows(resPV, resLV, resLP)
dplyr::select(Length)
resALL <- bind_rows(resPV, resLV, resLP)
dplyr::select(baseMean)
sessionInfo()
install.packages("tidyverse")
install.packages('BiocManager')
BiocManager::install("biomaRt")
library(BiocManager)
BiocManager::install("DESeq2")
install.packages(DESeq2)
install.packages("DESeq2")
library(DESeq2)
install.packages("DESeq2")
install.packages("ggplot2")
install.packages("gridExtra")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("DESeq2")
BiocManager::install("DESeq2")
install.packages("devtools")
devtools::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
devtools::install_github("Bioconductor/BiocManager")
library(BiocManager)
BiocManager::install("DESeq2")
BiocManager::install("DESeq2", site_repository = "https://cran.rstudio.com/")
getOption("repos")
BiocManager::install("viridis")
BiocManager::install("viridis")
install.packages("BiocManager")
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("viridis")
library(viridis)
install.packages("DESeq2")
install.packages("DESeq2")
library(DESeq1)
library(DESeq2)
remotes::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
remotes::install_github("Bioconductor/BiocManager")
library(BiocManager)
remove.packages("BiocManager")
library(BiocManger)
library(BiocManager)
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::version()
BiocManager::valid()
install.packages("BiocManager")
BiocManager::valid()
library(BiocManager)
detach("package:BiocManager", unload = TRUE)
remove.packages("BiocManager")
install.packages("BiocManger")
install.packages("BiocManger")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
# Set working directory:
setwd("~/Desktop/FromExceltoR/Presentations")
# Source custom R script
source("customFuncs.R")
### Reading in data
exprDat <- read_delim("GSE60450_Lactation-GenewiseCounts.txt", delim = "\t")
exprInfo <- read_delim("SampleInfo.txt", delim = "\t")
# Look at the data:
head(exprDat, n=5)
dim(exprDat)
exprInfo
## Tidying Dataset
# Rename columns and remove ID columns from expression dataset:
exprGenes <- exprDat %>%
dplyr::select(EntrezGeneID, Length) %>%
mutate(EntrezGeneID = as.character(EntrezGeneID))
exprGenes
# --------------
exprDat <- exprDat %>%
dplyr::select(-EntrezGeneID, -Length) %>%
rename_at(vars(names(.)), ~exprInfo$SampleName)
exprDat
# --------------
# Convert CellType and Status into factors and paste them together into a new vector with a '.' as the separator:
exprInfo <- exprInfo %>%
mutate(CellType = factor(CellType),
Status = factor(Status, levels = c("control", "pregnant", "lactate")),
TypeStatus = factor(paste(CellType, Status, sep = '.')))
exprInfo
#############
### Convert from Entrez to Gene Symbol
# We want to convert the entrez gene IDs into gene symbols. This can be done using the biomaRt package for R.
# Choose the mouse gene annotation set:
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl")
# Figure out what the exact names of the two kinds of IDs are within the biomaRt framework.
# First get attributes of the mouse annotation set then grep a pattern, in this case entrez and symbol:
#attributes <- listAttributes(ensembl)
#attributes[grep("entrez", attributes$name),]
#attributes[grep("symbol", attributes$name),]
# --------------
# From the above it seems that we need to use 'entrezgene_id' as input and convert it to 'mgi_symbol'.
# We convert the output to a tibble and rename the entrezgene_id to EntrezGeneID so it matches the name we have for our IDs:
EntrezGeneID <- unique(exprGenes$EntrezGeneID)
IDs <- getBM(attributes=c('entrezgene_id',
'mgi_symbol'),
filters = 'entrezgene_id',
values = EntrezGeneID,
mart = ensembl) %>%
as_tibble() %>%
dplyr::rename(EntrezGeneID = entrezgene_id) %>%
mutate(EntrezGeneID = as.character(EntrezGeneID))
# We give it a look:
IDs
# 1. Check.
# Do I have any genes IDs which have more than one gene symbol
MoreSym <- IDs %>%
filter(duplicated(EntrezGeneID)) %>%
nrow()
MoreSym
# --------------
# 2nd check
# Do I have the same input as output
dim(IDs)
dim(exprGenes)
# --------------
# --------------
# A look at the dimensions of the new IDs tibble shows that we have a different number of genes as output than we gave as input. This is because some IDs did not have a gene symbol in the ensembl from biomaRt.
# Additionally, there seems to be some EntrezGeneIDs with more than one gene symbol. We therefore need to concatenate symbols for IDs with more than one of these.
# For this we group_by the original IDs, using mutate and spread we split symbols into multiple columns and paste these together with a ',' as the separator:
IDs <- IDs %>%
group_by(EntrezGeneID) %>%
mutate(key = paste0('mgi_symbol_', row_number())) %>%
spread(key, mgi_symbol) %>%
unite("mgi_symbol", mgi_symbol_1:mgi_symbol_7, sep= ",", na.rm = TRUE, remove = TRUE)
IDs[grep(",", IDs$mgi_symbol),]
# --------------
# Now we just need to join together our IDs with the concatenated gene symbols (now we have only one entry for each ID):
exprGenes <- exprGenes %>%
left_join(., IDs, by='EntrezGeneID') %>%
mutate(name=ifelse(!is.na(mgi_symbol), mgi_symbol, EntrezGeneID))
exprGenes
# Let's check if we fixed the issues with dimensions:
dim(exprGenes)
dim(exprDat)
#############
### Initial Data Check
# All together:
# Original
exprDat
expr1 <- gather(exprDat) %>%
mutate(valuelog2 = log2(value+1))
expr1
# Plot it with ggplot2:
p1 <- ggplot(expr1, aes(value)) +
geom_histogram(color="black", fill="grey80", bins=100) +
theme_minimal()
p2 <- ggplot(expr1, aes(valuelog2)) +
geom_histogram(color="black", fill="grey80", bins=100) +
theme_minimal()
grid.arrange(p1, p2)
# The first plot tells us that we have a lot of 0 counts. Let's try to sample n random genes and plot their count distribution:
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
rename_at(vars(names(.)), ~paste0("Gene", seq(1:12))) %>%
gather()
# The first plot tells us that we have a lot of 0 counts. Let's try to sample n random genes and plot their count distribution:
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
rename_at(vars(names(.)), ~paste0("Gene", seq(1:12))) %>%
gather()
expr10
# Plot n randomly sampled genes:
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey80", bins=20) +
theme_minimal() +
facet_wrap(~key)
# The first plot tells us that we have a lot of 0 counts. Let's try to sample n random genes and plot their count distribution:
expr10 <- sample_n(exprDat,12) %>%
t() %>%
as_tibble() %>%
rename_at(vars(names(.)), ~paste0("Gene", seq(1:12))) %>%
gather()
# Plot n randomly sampled genes:
ggplot(expr10, aes(value)) +
geom_histogram(color="black", fill="grey80", bins=20) +
theme_minimal() +
facet_wrap(~key)
# Count number of 0s across samples for each gene
exprDat <- exprDat %>%
mutate(nzeros = rowSums(.==0))
exprDat
exprDat$nzeros
# At least 4 samples have more than 8 counts
keep <- which(exprDat$nzeros <= 8)
length(keep)
dim(exprDat)
# Genes to keep
exprDat <- exprDat[keep,] %>%
dplyr::select(-nzeros)
dim(exprDat)
exprGenes
dim9exprGenes
dim(exprGenes)
exprGenes <- exprGenes[keep,]
exprGenes
dim(exprGenes)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
airDat <- read_csv("airway_counts.csv")
#airDat
airSMet <- read_csv("airway_metadata.csv")
#airSMet
head(exprDat)
exprInfo
exprGenes
# Make a DESeq2 object:
exprObj <- DESeqDataSetFromMatrix(countData = exprDat,
colData = exprInfo,
rowData = exprGenes,
design= ~CellType+Status)
exprObj
# Estimating dispersion, gene-wise and mean-dispersion, fitting model and testing:
exprObj <- DESeq(exprObj)
exprObj
# Counts:
head(assay(exprObj))
# Let's have a look at the library sizes and scaling factors:
colSums(assay(exprObj))
# The count distributions may be dominated by a few genes with very large counts. These genes will drive plotting e.g. heatmaps, PCA analysis etc.
# boxplot(assay(exprObj))
boxplot(assay(exprObj))
# The count distributions may be dominated by a few genes with very large counts. These genes will drive plotting e.g. heatmaps, PCA analysis etc.
# boxplot(assay(exprObj))
boxplot(assay(exprObj))
boxplot(log2(assay(exprObj)))
exprObjvst <- vst(exprObj,blind=TRUE)
boxplot(assay(exprObjvst), xlab="", ylab="Log2 counts per million reads mapped ",las=2)
plotPCA(exprObjvst,intgroup=c("Status"))
plotPCA(exprObjvst,intgroup=c("CellType"))
# Test for DE genes between lactating mice and control mice adjusted for cell type:
# Lactating vs Control mice
resLC <- results(exprObj, contrast = c("Status", "lactate", "control"), independentFiltering = FALSE)
head(resLC)
dim(resLC)
# Summary and plot of DE analysis results:
summary(resLC)
plotMA
DESeq2::plotMA(resLC)
head(resLC)
resLC <- SigDE(resLC, "resLC", exprGenes)
resLC
resLC
dim(resLC)
# Pregnant vs Control mice
resPC <- results(exprObj, contrast = c("Status", "pregnant", "control"),  independentFiltering = FALSE)
# Custom filter function to get significant genes and gene symbols for these
resPC <- SigDE(resPC, "resPC", exprGenes)
# Lactating vs Pregnant mice
resLP <- results(exprObj, contrast = c("Status", "lactate", "pregnant"),  independentFiltering = FALSE)
resLP <- SigDE(resLP, "resLP", exprGenes)
# Pregnant vs Control
resPC$name %>%
unique() %>%
length()
# Lactating vs Control
resLC$name %>%
unique() %>%
length()
# Lactating vs Pregnant
resLP$name %>%
unique() %>%
length()
# Make a vector of unique EntrezGeneIDs (top50):
topDE <- bind_rows(resPC[1:50,], resLC[1:50,], resLP[1:50,]) %>%
pull(EntrezGeneID) %>%
unique()
resVST <- assay(exprObjvst) %>%
as_tibble() %>%
bind_cols(exprGenes, .) %>%
filter(EntrezGeneID %in% topDE)
# Extract gene names:
HPnames <- resVST$name
# Remove IDs from expression matrix and convert to dataframe:
HPdat <- resVST %>%
dplyr::select(-EntrezGeneID, -Length, -mgi_symbol, -name)
# Heatmap colors
heat.cols <- viridis(n=10, option = "A")
my.status <- exprInfo$Status
my.type <- c(rep("#79ADDC", 6), rep("#133C55", 6))
# Plot the heatmap
heatmap(as.matrix(HPdat),
col=heat.cols,
hclustfun=function(d) hclust(d, method="ward.D2"),
trace="none", Rowv = NA, labRow=HPnames,
ColSideColors=my.type,labCol=my.status,
cexCol=1.2, cexRow = 1.3)
# Plot the heatmap
heatmap(as.matrix(HPdat),
col=heat.cols,
hclustfun=function(d) hclust(d, method="ward.D2"),
trace="none", Rowv = NA, labRow=HPnames,
ColSideColors=my.type,labCol=my.status,
cexCol=1.2, cexRow = 1.3)
# http://yulab-smu.top/clusterProfiler-book/index.html
# Check that we have pathway information for our species of interest:
search_kegg_organism('mmu', by='kegg_code')
resLCpw <- enrichKEGG(gene = resLC$EntrezGeneID,
organism = 'mmu',
universe=unique(exprGenes$EntrezGeneID))
head(resLCpw)
resLCgo <- enrichGO(gene = resLC$EntrezGeneID,
OrgDb = org.Mm.eg.db,
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05,
readable = TRUE)
head(resLCgo)
