# Protein/Gene information
IDconvert <- CAdeData$IDconvert
proInfoWGCNA <- proInfoUniq %>%
dplyr::select(Group, Sex, Localiz., Relapse.time, Relapse.type, Localiz.3, AgeGroup) %>%
mutate_if(is.factor, as.integer)
# Transpose dataset
proDatWGCNA <- t(proDatUniqImpBC)
colnames(proDatWGCNA) <- IDconvert$Genes
# Gene Expression check
gsg <- goodSamplesGenes(proDatWGCNA, verbose = 3)
gsg$allOK
# Hierarchical clustering of samples
sampleTree <- hclust(dist(proDatWGCNA), method = "ward.D2")
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,cex.axis = 1.5, cex.main = 2)
# Powers 1-20 vector
powers <- c(c(1:10), seq(from = 12, to=20, by=2))
# Testing soft thresholds 1-20.
sft <- pickSoftThreshold(proDatWGCNA, powerVector = powers, corFnc = cor, corOptions = list(use = 'p'), networkType = "signed")
# Make side by side plots
par(mfrow = c(1,2))
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n", main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels=powers,col="red")
# Cutoff line at 0.8
abline(h=0.8,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers,col="red")
softPower <- 12
adjacency <- adjacency(proDatWGCNA, power = softPower, type = "signed", corFnc="bicor")
set.seed(333)
geneTree <- hclust(as.dist(dissTOM), method = "ward.D2")
TOM <- TOMsimilarity(adjacency)
dissTOM <- 1-TOM
set.seed(333)
geneTree <- hclust(as.dist(dissTOM), method = "ward.D2")
# Plot the resulting clustering tree (dendrogram)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",labels = FALSE)
minModuleSize <- 30
# Module identification using dynamic tree cut
dynamicMods <- cutreeDynamic(dendro = geneTree, distM = dissTOM, deepSplit = 2, pamRespectsDendro = FALSE, minClusterSize = minModuleSize)
# See how many proteins are in each module
table(dynamicMods)
# Convert numeric lables into colors
dynamicColors <- labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
#sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05,main = "Gene dendrogram and module colors")
# Calculate eigengenes
MEList <- moduleEigengenes(proDatWGCNA, colors = dynamicColors)
MEs <- MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss <- 1-cor(MEs)
# Cluster module eigengenes
METree <- hclust(as.dist(MEDiss), method = "ward.D2")
# Plot the result
plot(METree, main = "Clustering of module eigengenes",xlab = "", sub = "")
# Cut off for merging module - e.g. moduels with less than 25% dissimilarity are merged
MEDissThres <- 0.20
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merged <- mergeCloseModules(proDatWGCNA, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colorsmerged
mergedColors <- merged$colors
# Eigengenes of the new merged modules
mergedMEs <- merged$newMEs
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors), c("Dynamic Tree Cut", "Merged dynamic"), dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors
moduleColors <- mergedColors
# Construct numerical labels corresponding to the colors
colorOrder <- c("grey", standardColors(50))
moduleLabels <- match(moduleColors, colorOrder)-1
MEs <- mergedMEs
customColorOrder <- c("grey","#355070","#b56576","#e56b6f","#eaac8b", "#8e9aaf","#cbc0d3","#efd3d7","#feeafa","#dee2ff", "#cad2c5","#84a98c","#52796f","#354f52","#2f3e46", "#0081a7","#00afb9","#fdfcdc","#fed9b7", "#f07167","#d8e2dc","#ffe5d9", "#ffcad4")
moduleColors.custom <- customColorOrder[moduleLabels + 1]
# Define numbers of genes and samples:
Genes <- ncol(proDatWGCNA)
nSamples <- nrow(proDatWGCNA)
# Recalculate MEs with color labels
MEs0 <- moduleEigengenes(proDatWGCNA, moduleColors.custom)$eigengenes
#MEs0 <- moduleEigengenes(proDatWGCNA, moduleColors)$eigengenes
MEs <- orderMEs(MEs0)
# Correlation (pearson) and testing for significance.
moduleTraitCor <- cor(MEs, proInfoWGCNA, use = "p")
rownames(moduleTraitCor) <- gsub('ME', '', rownames(moduleTraitCor))
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
moduleTraitPvalue <- p.adjust(moduleTraitPvalue, method = 'fdr')
#textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "")
#dim(textMatrix) <- dim(moduleTraitCor)
# par(mar = c(6, 8.5, 3, 3))
# Display the correlation values within a heatmap plot
# labeledHeatmap(Matrix = moduleTraitCor, xLabels = names(proInfoWGCNA),
#               yLabels = gsub("ME", '', names(MEs)), ySymbols = gsub("ME", '', names(MEs)),
#               yColorLabels = TRUE,
#               textMatrix = textMatrix,
#               setStdMargins = FALSE,
#               cex.text = 0.3,
#               zlim = c(-1,1),
#               main = paste("Module-trait relationships"))
col.cols <- data.frame(paste0(rep("mod", nrow(moduleTraitCor)), seq(1,nrow(moduleTraitCor))))
colnames(col.cols) <- "Module"
rownames(col.cols) <- rownames(moduleTraitCor)
color.scheme <- list(Module=c(mod1="#cbc0d3", mod2="#e56b6f",mod3="#52796f", mod4="#cad2c5", mod5="#feeafa", mod6="#f07167", mod7="#ffe5d9", mod8="#eaac8b", mod9="#00afb9", mod10="#ffcad4", mod11="#d8e2dc", mod12="#b56576", mod13="#efd3d7", mod14="#354f52", mod15="#fed9b7", mod16="#8e9aaf", mod17="#2f3e46", mod18="#84a98c", mod19="#dee2ff"))
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '')
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 5, cellheight = 5)
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 5)
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 10)
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 20)
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 30)
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 30, cellheight = 20)
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 30, cellheight = 10)
25
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 25, cellheight = 10)
#textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "")
#dim(textMatrix) <- dim(moduleTraitCor)
# par(mar = c(6, 8.5, 3, 3))
# Display the correlation values within a heatmap plot
# labeledHeatmap(Matrix = moduleTraitCor, xLabels = names(proInfoWGCNA),
#               yLabels = gsub("ME", '', names(MEs)), ySymbols = gsub("ME", '', names(MEs)),
#               yColorLabels = TRUE,
#               textMatrix = textMatrix,
#               setStdMargins = FALSE,
#               cex.text = 0.3,
#               zlim = c(-1,1),
#               main = paste("Module-trait relationships"))
col.cols <- data.frame(paste0(rep("mod", nrow(moduleTraitCor)), seq(1,nrow(moduleTraitCor))))
colnames(col.cols) <- "Module"
rownames(col.cols) <- rownames(moduleTraitCor)
color.scheme <- list(Module=c(mod1="#cbc0d3", mod2="#e56b6f",mod3="#52796f", mod4="#cad2c5", mod5="#feeafa", mod6="#f07167", mod7="#ffe5d9", mod8="#eaac8b", mod9="#00afb9", mod10="#ffcad4", mod11="#d8e2dc", mod12="#b56576", mod13="#efd3d7", mod14="#354f52", mod15="#fed9b7", mod16="#8e9aaf", mod17="#2f3e46", mod18="#84a98c", mod19="#dee2ff"))
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 25, cellheight = 10)
TraitCorrGenes <- moduleTraitCor %>%
as_tibble() %>%
gather(key="Trait", value="PCorr") %>%
mutate(ModCols = gsub("ME", "", rep(rownames(moduleTraitCor), ncol(moduleTraitCor))), adj.Pval = moduleTraitPvalue) %>%
filter(adj.Pval < 0.0001 & abs(PCorr) > 0.4 & !ModCols=="grey60")
proMods <- IDconvert %>%
#mutate(ModCols = moduleColors)
mutate(ModCols = moduleColors.custom) %>%
filter(ModCols %in% unique(TraitCorrGenes$ModCols))
col.cols <- data.frame(paste0(rep("mod", nrow(moduleTraitCor)), seq(1,nrow(moduleTraitCor))))
colnames(col.cols) <- "Module"
rownames(col.cols) <- rownames(moduleTraitCor)
color.scheme <- list(Module=c(mod1="#cbc0d3", mod2="#e56b6f",mod3="#52796f", mod4="#cad2c5", mod5="#feeafa", mod6="#f07167", mod7="#ffe5d9", mod8="#eaac8b", mod9="#00afb9", mod10="#ffcad4", mod11="#d8e2dc", mod12="#b56576", mod13="#efd3d7", mod14="#354f52", mod15="#fed9b7", mod16="#8e9aaf", mod17="#2f3e46", mod18="#84a98c", mod19="#dee2ff"))
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 25, cellheight = 10)
col.cols <- data.frame(paste0(rep("mod", nrow(moduleTraitCor)), seq(1,nrow(moduleTraitCor))))
colnames(col.cols) <- "Module"
rownames(col.cols) <- rownames(moduleTraitCor)
color.scheme <- list(Module=c(mod1="#cbc0d3", mod2="#e56b6f",mod3="#52796f", mod4="#cad2c5", mod5="#feeafa", mod6="#f07167", mod7="#ffe5d9", mod8="#eaac8b", mod9="#00afb9", mod10="#ffcad4", mod11="#d8e2dc", mod12="#b56576", mod13="#efd3d7", mod14="#354f52", mod15="#fed9b7", mod16="#8e9aaf", mod17="#2f3e46", mod18="#84a98c", mod19="#dee2ff"))
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '')
col.cols <- data.frame(paste0(rep("mod", nrow(moduleTraitCor)), seq(1,nrow(moduleTraitCor))))
colnames(col.cols) <- "Module"
rownames(col.cols) <- rownames(moduleTraitCor)
color.scheme <- list(Module=c(mod1="#cbc0d3", mod2="#e56b6f",mod3="#52796f", mod4="#cad2c5", mod5="#feeafa", mod6="#f07167", mod7="#ffe5d9", mod8="#eaac8b", mod9="#00afb9", mod10="#ffcad4", mod11="#d8e2dc", mod12="#b56576", mod13="#efd3d7", mod14="#354f52", mod15="#fed9b7", mod16="#8e9aaf", mod17="#2f3e46", mod18="#84a98c", mod19="#dee2ff"))
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 25)
col.cols <- data.frame(paste0(rep("mod", nrow(moduleTraitCor)), seq(1,nrow(moduleTraitCor))))
colnames(col.cols) <- "Module"
rownames(col.cols) <- rownames(moduleTraitCor)
color.scheme <- list(Module=c(mod1="#cbc0d3", mod2="#e56b6f",mod3="#52796f", mod4="#cad2c5", mod5="#feeafa", mod6="#f07167", mod7="#ffe5d9", mod8="#eaac8b", mod9="#00afb9", mod10="#ffcad4", mod11="#d8e2dc", mod12="#b56576", mod13="#efd3d7", mod14="#354f52", mod15="#fed9b7", mod16="#8e9aaf", mod17="#2f3e46", mod18="#84a98c", mod19="#dee2ff"))
pheatmap(moduleTraitCor, display_numbers = T, annotation_row = col.cols, annotation_legend=FALSE, annotation_colors = color.scheme, color = viridis(n=200, option = "inferno", begin= 0.2, end = 0.85, direction = -1), cluster_rows = F, cluster_cols = F, fontsize_number = 8, border_color = "white", number_color = "white", labels_row = '', cellwidth = 40)
TraitCorrGenes <- moduleTraitCor %>%
as_tibble() %>%
gather(key="Trait", value="PCorr") %>%
mutate(ModCols = gsub("ME", "", rep(rownames(moduleTraitCor), ncol(moduleTraitCor))), adj.Pval = moduleTraitPvalue) %>%
filter(adj.Pval < 0.0001 & abs(PCorr) > 0.4 & !ModCols=="grey60")
proMods <- IDconvert %>%
#mutate(ModCols = moduleColors)
mutate(ModCols = moduleColors.custom) %>%
filter(ModCols %in% unique(TraitCorrGenes$ModCols))
proMods
TraitCorrGenes
TraitCorrGenes <- moduleTraitCor %>%
as_tibble() %>%
gather(key="Trait", value="PCorr") %>%
mutate(ModCols = gsub("ME", "", rep(rownames(moduleTraitCor), ncol(moduleTraitCor))),
adj.Pval = moduleTraitPvalue,
ModColsName = c("greyPurle", "powderGreen", "darkCyan", "pinkRose",
"darkTeal", "lightOrange", "murkyBlue","oliveGreen", "lavender"))  %>%
filter(adj.Pval < 0.0001 & abs(PCorr) > 0.4 & !ModCols=="grey60")
TraitCorrGenes <- moduleTraitCor %>%
as_tibble() %>%
gather(key="Trait", value="PCorr") %>%
mutate(ModCols = gsub("ME", "", rep(rownames(moduleTraitCor), ncol(moduleTraitCor))),
adj.Pval = moduleTraitPvalue,
ModColsName = c("greyPurle", "powderGreen", "darkCyan", "pinkRose",
"darkTeal", "lightOrange", "murkyBlue","oliveGreen", "lavender"))  %>%
filter(adj.Pval < 0.0001 & abs(PCorr) > 0.4 & !ModCols=="grey60")
TraitCorrGenes <- moduleTraitCor %>%
as_tibble() %>%
gather(key="Trait", value="PCorr") %>%
mutate(ModCols = gsub("ME", "", rep(rownames(moduleTraitCor), ncol(moduleTraitCor))),
adj.Pval = moduleTraitPvalue)  %>%
filter(adj.Pval < 0.0001 & abs(PCorr) > 0.4 & !ModCols=="grey60") %>%
mutate(ModColsName = c("greyPurle", "powderGreen", "darkCyan", "pinkRose",
"darkTeal", "lightOrange", "murkyBlue","oliveGreen", "lavender"))
TraitCorrGenes
TraitCorrGenes <- moduleTraitCor %>%
as_tibble() %>%
gather(key="Trait", value="PCorr") %>%
mutate(ModCols = gsub("ME", "", rep(rownames(moduleTraitCor), ncol(moduleTraitCor))),
adj.Pval = moduleTraitPvalue)  %>%
filter(adj.Pval < 0.0001 & abs(PCorr) > 0.4 & !ModCols=="grey60") %>%
mutate(ModColsName = c("greyPurle", "powderGreen", "darkCyan", "pinkRose",
"darkTeal", "lightOrange", "murkyBlue","oliveGreen", "dustyLavender"))
proMods <- IDconvert %>%
#mutate(ModCols = moduleColors)
mutate(ModCols = moduleColors.custom) %>%
filter(ModCols %in% unique(TraitCorrGenes$ModCols))
proMods
TraitCorrGenes
proMods <- IDconvert %>%
#mutate(ModCols = moduleColors)
mutate(ModCols = moduleColors.custom) %>%
filter(ModCols %in% unique(TraitCorrGenes$ModCols)) %>%
left_join(., TraitCorrGenes[, c(3,5)])
proMods
# List of relevant objects for saving
WGCNAres <- list(TraitCorrGenes, proMods)
names(WGCNAres) <- c("TraitCorrGenes", "proMods")
# Save as Rdata
save(WGCNAres, file=paste0(my.dir, "Results/WGCNAres.Rdata"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Color by Batch
p1 <- UMAPplot(proDatUniqImp, proInfoUniq$Batch, "", c("#373F51", "#FFC09F"), "Colored by Batch - Not corrected")
# Color by Batch1
p1 <- UMAPplot(proDatUniqImp, proInfoUniq$Batch, "", c("#373F51", "#FFC09F"), "Colored by Batch")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
my.dir <- "~/Desktop/HeaDS/Colon_Adenom_Proteomics/"
source("AdeProFunctions.R")
load(paste0(my.dir, "Results/CAdeData.Rdata"))
# Dataset with imputed missing values
proDatUniqImp <- CAdeData$proDatUniqImp
# Dataset with imputed missing values & batch correction
proDatUniqImpBC <- CAdeData$proDatUniqImpBC
# Sample information
proInfoUniq <- CAdeData$proInfoUniq
# Protein/Gene information
IDconvert <- CAdeData$IDconvert
Group <- proInfoUniq$Group
Batch <- proInfoUniq$Batch
# Design matrix - Including Batch as a covariate
GB.design <- model.matrix(~ 0 + Group + Batch)
# Group contrast matrix
GB.contrast <- makeContrasts(GroupG1 - GroupG0, levels = GB.design)
# DA proteins with adjustment for batch:
proDA.ba <- DA_proteins(GB.contrast, proDatUniqImp, GB.design)
#proDA.ba <- DA_proteins(G.contrast, proDatUniqImp, G.design, Batch)
proDA.ba <- DA_res(proDA.ba)
GenesPval <- proDA.ba %>%
filter(P.Value <= 0.01) %>%
pull(Genes)
HeatDat <- proDatUniqImpBC %>%
mutate(Genes = IDconvert$Genes) %>%
filter(Genes %in% GenesPval) %>%
column_to_rownames(var = "Genes")
# Column colors
col.cols <- data.frame(Group = Group)
rownames(col.cols) <- proInfoUniq$Sample
# Heatmap colors
heat.cols <- viridis(n=50, option = "A")
# Plot the heatmap
pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
# Plot the heatmap
pHm <- pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
# Plot the heatmap
pHm <- pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
# Plot the heatmap
pHm <- pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
pHm
# Plot the heatmap
pHm <- pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
pHm
pdf(file = paste0(my.dir, "Results/DAprots_heatmap.pdf"))
pHm
dev.off
# Plot the heatmap
pHm <- pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
pHm
pdf(file = paste0(my.dir, "Results/DAprots_heatmap.pdf"))
pHm
dev.off()
# Plot the heatmap
pHm <- pheatmap(as.matrix(HeatDat), color = heat.cols, scale="row", annotation_col = col.cols, clustering_method = "ward.D2", show_colnames = FALSE, annotation_colors = list(Group=c(G0="#bee9e8", G1="#7a9cc6")), fontsize_row = 4)
pdf(file = paste0(my.dir, "Results/DAprots_heatmap.pdf"))
pHm
dev.off()
library(readxl)
library(writexl)
library(tidyverse)
library(ggplot2)
### Set working directory ----
setwd('/Users/kgx936/Desktop/FromExceltoR_2021/Presentations/')
downloads <-
read_excel("downloads.xlsx") %>%
filter(size > 0)
downloads
ggplot(downloads,aes(x=machineName,y=size))
ggplot(downloads, aes(x = machineName, y = size/10^6)) +
geom_col()
### Figure out which order
dl_sizes <- downloads %>%
group_by(machineName) %>%
summarize(size_mb = sum(size)/10^6) %>%
arrange(size_mb)
dl_sizes
downloads
dl_sizes
### MachineName as character vector, sample random 50:
MachineName50 <- downloads$machineName %>%
sample(., 50)
MachineName50
### MachineName as factor:
MachineName50 <- factor(MachineName50)
MachineName50
dl_sizes
downloads <- downloads %>%
mutate(machineName = factor(machineName, levels = dl_sizes$machineName))
downloads
dl_sizes$machineName
ggplot(downloads, aes(x = machineName, y = size/10^6)) +
geom_col()
dl_sizes
dl_sizes$machineName
# Assign a plot
p <- ggplot(downloads, aes(x = machineName, y = size/10^6)) + geom_col()
p
p + coord_flip()
ggplot(downloads, aes(x = machineName, y = size/10^6, fill = month)) + geom_col()
p <- ggplot(downloads, aes(x = machineName, y = size/10^6, fill = month))
p
# Some other bar chart options ----
p + geom_col(position = "dodge") ## Left/first plot
p + geom_col(position = "fill") ## Right/second plot
daily_downloads <- downloads %>%
group_by(machineName, date) %>%
summarize(dl_count = n(), size_mb = sum(size)/10^6) %>%
mutate(total_dl_count = cumsum(dl_count))
daily_downloads
p <- ggplot(daily_downloads, aes(x = date, y = dl_count)) +
geom_point()
p
p <- p + scale_y_log10()
p
p + aes(color = machineName)
p + aes(shape = machineName)
p
p + aes(size = size_mb)
p + aes(size = size_mb, color = size_mb > 2)
ggplot(daily_downloads, aes(x = date, y = total_dl_count)) +
geom_line()
ggplot(daily_downloads, aes(x = date, y = total_dl_count)) +
geom_line(aes(group = machineName, colour = machineName))
p <- ggplot(daily_downloads, aes(x = machineName, y = size_mb, fill=machineName)) +
geom_boxplot()
p + scale_y_log10()
### A violin plot ----
p <- ggplot(daily_downloads, aes(x = machineName, y = size_mb, fill=machineName)) +
geom_violin(trim = TRUE) + scale_y_log10()
p
p2 <- p + geom_point(size = 1, alpha = 0.5) +
theme_minimal() +
scale_fill_manual(values=c("#2A2D43", "#91A6FF", "#C7EDE4", "#AFA060", "#AD8350"))
p2
daily_downloads
p2
hist(daily_downloads$size_mb)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(tidyverse)
library(ggplot2)
library(readxl)
library(BiocManager)
library(DESeq2)
library(EDASeq)
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
library(readxl)
airDat <- read_excel(airway_counts.xlsx()
airDat <- read_excel(airway_counts.xlsx)
airDat <- read_excel("airway_counts.xlsx")
setwd("~/Desktop/FromExceltoR_2021/Exercises")
airDat <- read_excel("airway_counts.xlsx")
airMet <- read_excel("airway_metadata.xlsx")
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
airDat <- airDat %>%
filter(nzeros <= 4) %>%
dplyr::select(-nzeros)
dim(airDat)
airPlot <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
gather(key = ID, value=geneCount)
airPlot
p1 <- ggplot(airPlot, aes(ID, geneCount)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
p1
# Set working directory:
setwd("~/Desktop/FromExceltoR/Presentations")
es("readxl")
library(tidyverse)
library(readxl)
# For Plotting
# install.packages("ggplot2")
library(ggplot2)
# For DEA
# install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
### Reading in data
exprDat <- read_excel("MouseRNAseq.xlsx")
exprInfo <- read_excel("MouseSampleInfo.xlsx")
# Look at the data:
head(exprDat, n=5)
dim(exprDat)
# Look at the samples:
exprInfo
# Convert character columns to factor types:
exprInfo <- exprInfo %>%
mutate(CellType = as.factor(CellType),
Status = as.factor(Status))
# Look at the samples:
exprInfo
# Sample 16 random rows (genes)
expr16 <- exprDat %>%
sample_n(.,16)
expr16
# Extract genename
GeneName <- expr16$GeneName
GeneName
expr16 %>%
dplyr::select(-GeneName) %>%
t() %>%
as_tibble()
GeneName
expr16 %>%
dplyr::select(-GeneName) %>%
t() %>%
as_tibble() %>%
rename_at(vars(names(.)), ~GeneName)
counts
expr16 <- expr16 %>%
dplyr::select(-GeneName) %>%
t() %>%
as_tibble() %>%
rename_at(vars(names(.)), ~GeneName) %>%
gather()
expr16
tail(expr16)
# Plot n randomly sampled genes:
ggplot(expr16, aes(log2(value+1))) +
geom_histogram(color="black", fill="grey80", bins=30) +
theme_minimal() +
facet_wrap(~key)
exprDat
exprDat %>%
mutate(nzeros = rowSums(dplyr::select(.,-GeneName)==0))
exprDat <- exprDat %>%
mutate(nzeros = rowSums(dplyr::select(.,-GeneName)==0)) %>%
filter(nzeros <= 8) %>%
dplyr::select(-nzeros)
# How many genes do we have left:
dim(exprDat)
# Pull out GeneNames and EntrezGeneID for later use.
GeneNames <- exprDat %>%
dplyr::select(GeneName)
exprDat
# Convert to exprDat to a dataframe and make GenNames column into rownames:
exprDat <- exprDat %>%
column_to_rownames(., var = "GeneName")
head(exprDat, n=5)
exprDat
exprInfo
# Make a DESeq2 object:
exprObj <- DESeqDataSetFromMatrix(countData = exprDat,
colData = exprInfo,
design= ~CellType+Status)
exprObj
# Counts:
head(assay(exprObj))
boxplot(log2(assay(exprObj)+1), las=2)
colSums(assay(exprObj))
exprObjvst <- vst(exprObj,blind=TRUE)
boxplot(assay(exprObjvst), xlab="", ylab="Log2 counts per million reads mapped ",las=2)
# Estimating dispersion, gene-wise and mean-dispersion, fitting model and testing:
exprObj <- DESeq(exprObj)
results
table(exprInfo$CellType, exprInfo$Status)
exprDat <- read_excel("MouseRNAseq.xlsx")
exprInfo <- read_excel("MouseSampleInfo.xlsx")
# Look at the data:
head(exprDat, n=5)
dim(exprDat)
# Convert character columns to factor types:
exprInfo <- exprInfo %>%
mutate(CellType = as.factor(CellType),
Status = as.factor(Status))
exprDat <- exprDat %>%
mutate(nzeros = rowSums(dplyr::select(.,-GeneName)<=3)) %>% # count number of
filter(nzeros <= 3) %>%
dplyr::select(-nzeros)
# How many genes do we have left:
dim(exprDat)
### Reading in data
exprDat <- read_excel("MouseRNAseq.xlsx")
exprDat <- exprDat %>%
mutate(nthrees = rowSums(dplyr::select(.,-GeneName)<=3)) %>% # count number of
filter(nthrees <= 4) %>%
dplyr::select(-nthrees)
# How many genes do we have left:
dim(exprDat)
getwd()
