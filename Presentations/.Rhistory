#comparing csv ddg files from first, rescued 2gb4 run and re-run (which also failed at the prism file making stage but I didn't do anything to it after)
ddg_first_run <- read.csv(paste0(base_dir, 'rosetta_ddgs/2gb4_ddgs_first_run.csv'), sep = ',', header = F, col.names = c('variant', 'mean_ddG_first','std_ddG_first'),)
ddg_re_run <- read.csv(paste0(base_dir, 'rosetta_ddgs/2gb4_ddgs_re_run.csv'), sep = ',', header = F, col.names = c('variant', 'mean_ddG_re','std_ddG_re'),)
p <- ggplot(merge(ddg_first_run, ddg_re_run, by = 'variant'), aes(x=mean_ddG_first, y=mean_ddG_re)) +
geom_point()
p
p <- ggplot(merge(ddg_first_run, ddg_re_run, by = 'variant'), aes(x=mean_ddG_first, y=mean_ddG_re)) +
geom_point() +
ggtitle('Comparing csv output files of rescued 2gb4 run and re-run') +
theme_bw(base_size = 20)
png(filename = paste0(base_dir, '/ddg_pipeline_debug/ddg_csv_first_VS_rerun.png'), width = 800, height = 600)
p
dev.off()
#compare directly the old prism file of hm_2gb4 and the prism file made from the new csv (re-run)
p <- ggplot(rbind(hm_2gb4,hm_2gb4_csv), aes(x=mean_ddG, fill=pdb)) +
geom_density(bw = 0.08, alpha = 0.5) +
theme_bw(base_size = 20)
p
hm_2gb4 <- read.csv(paste0(base_dir, 'rosetta_ddgs/prism_rosetta_XXX_2gb4_best-gap-SHIFTED_start3.txt'), comment.char = '#', sep = ' ')
hm_2gb4$pdb <- rep('2gb4_prism', nrow(hm_2gb4))
hm_2gb4_csv <- read.csv(paste0(base_dir, 'rosetta_ddgs/prism_rosetta_XXX_2gb4_best-gap-from-csv_start3.txt'), comment.char = '#', sep = ' ')
hm_2gb4_csv$pdb <- rep('2gb4_csv', nrow(hm_2gb4))
#compare directly the old prism file of hm_2gb4 and the prism file made from the new csv (re-run)
p <- ggplot(rbind(hm_2gb4,hm_2gb4_csv), aes(x=mean_ddG, fill=pdb)) +
geom_density(bw = 0.08, alpha = 0.5) +
ggtitle('Distribution of ddG values in prism and csv output files') +
theme_bw(base_size = 20)
p
png(filename = paste0(base_dir, '/ddg_pipeline_debug/ddg_distros.png'), width = 800, height = 600)
p
dev.off()
library(ROCR)
library(ggplot2)
library(reshape2)
#ROC curve from homology model ddgs and vamp seq categories (low vs low abundance) for hm ddg paper
base_dir <- "/home/henrike/Documents/PD_AS/projects/hm_ddgs/"
#load in merged vamp seq data and create high and low data sets with the rule:
########################################################
#low-abundance are variants where score + SD < 0.72 and high abundance are vars where score - SD > 0.72
vamp_dat_all <- read.csv(paste0(base_dir, 'data/prism_merge_hmddgs_vampseq.txt'), comment.char = '#',
sep = ' ', col.names = c('variant', 'vamp_score', 'vamp_sd', 'mean_ddg_3lcc', 'std_ddg_3lcc',
'mean_ddg_1pjz', 'std_ddg_1pjz', 'mean_ddg_2gb4', 'std_ddg_2gb4'))
library(ROCR)
library(ggplot2)
library(reshape2)
#ROC curve from homology model ddgs and vamp seq categories (low vs low abundance) for hm ddg paper
base_dir <- "/home/henrike/Documents/PD_AS/projects/hm_ddgs/"
#load in merged vamp seq data and create high and low data sets with the rule:
########################################################
#low-abundance are variants where score + SD < 0.72 and high abundance are vars where score - SD > 0.72
vamp_dat_all <- read.csv(paste0(base_dir, 'data/prism_merge_hmddgs_vampseq.txt'), comment.char = '#',
sep = ' ', col.names = c('variant', 'vamp_score', 'vamp_sd', 'mean_ddg_3lcc', 'std_ddg_3lcc',
'mean_ddg_1pjz', 'std_ddg_1pjz', 'mean_ddg_2gb4', 'std_ddg_2gb4',
'mean_ddg_2bzg', 'std_ddg_2bzg'))
#find low and high abundant vars in one go (nested ifelse)
vamp_dat_all$class <- ifelse((vamp_dat_all$vamp_score - vamp_dat_all$vamp_sd)> 0.72, 'H',
ifelse((vamp_dat_all$vamp_score + vamp_dat_all$vamp_sd)< 0.72, 'L', NA))
#drop rows where class is NA. Actually also drop rows where the ddgs are NA since we can't use these for the ROC, so just complete cases
vamp_dat_all <- vamp_dat_all[complete.cases(vamp_dat_all),]
m <- melt(vamp_dat_all, id.vars = c('variant', 'vamp_score', 'vamp_sd', 'class'),
measure.vars = c('mean_ddg_3lcc', 'mean_ddg_1pjz', 'mean_ddg_2gb4', 'mean_ddg_2bzg'))
p3 <- ggplot(m, aes(x=variable, y=value, color = class)) +
geom_boxplot() +
xlab('model') + ylab('ddG') +
theme_bw(base_size = 20)
p3
png(filename = paste0(base_dir, 'ddg_separation_box.png'), width = 800, height = 600)
p3
dev.off()
pred_3lcc <- prediction(vamp_dat_all$rv_mean_ddg_3lcc, vamp_dat_all$class)
perf_3lcc <- performance(pred_3lcc, "tpr", "fpr")
df1 <- cbind(as.data.frame(perf_3lcc@x.values),as.data.frame(perf_3lcc@y.values),rep('3lcc',length(perf_3lcc@x.values[[1]])))
colnames(df1) <-c('fpr', 'tpr', 'pdb')
pred_1pjz <- prediction(vamp_dat_all$rv_mean_ddg_1pjz, vamp_dat_all$class)
perf_1pjz <- performance(pred_1pjz, "tpr", "fpr")
df2 <- cbind(as.data.frame(perf_1pjz@x.values), as.data.frame(perf_1pjz@y.values),rep('1pjz',length(perf_1pjz@x.values[[1]])))
pred_3lcc <- prediction(vamp_dat_all$mean_ddg_3lcc, vamp_dat_all$class)
perf_3lcc <- performance(pred_3lcc, "tpr", "fpr")
df1 <- cbind(as.data.frame(perf_3lcc@x.values),as.data.frame(perf_3lcc@y.values),rep('3lcc',length(perf_3lcc@x.values[[1]])))
colnames(df1) <-c('fpr', 'tpr', 'pdb')
pred_1pjz <- prediction(vamp_dat_all$mean_ddg_1pjz, vamp_dat_all$class)
perf_1pjz <- performance(pred_1pjz, "tpr", "fpr")
df2 <- cbind(as.data.frame(perf_1pjz@x.values), as.data.frame(perf_1pjz@y.values),rep('1pjz',length(perf_1pjz@x.values[[1]])))
colnames(df2) <-c('fpr', 'tpr', 'pdb')
pred_2gb4 <- prediction(vamp_dat_all$mean_ddg_2gb4, vamp_dat_all$class)
perf_2gb4 <- performance(pred_2gb4, "tpr", "fpr")
df3 <- cbind(as.data.frame(perf_2gb4@x.values), as.data.frame(perf_2gb4@y.values),rep('2gb4',length(perf_2gb4@x.values[[1]])))
colnames(df3) <-c('fpr', 'tpr', 'pdb')
pred_2bzg <- prediction(vamp_dat_all$mean_ddg_2bzg, vamp_dat_all$class)
perf_2bzg <- performance(pred_2bzg, "tpr", "fpr")
df4 <- cbind(as.data.frame(perf_2bzg@x.values), as.data.frame(perf_2bzg@y.values),rep('2gb4',length(perf_2bzg@x.values[[1]])))
colnames(df4) <-c('fpr', 'tpr', 'pdb')
all_df <- rbind(df1, df2, df3)
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
theme_bw(base_size = 20)
p
all_df <- rbind(df1, df2, df3, df4)
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
theme_bw(base_size = 20)
p
pred_2bzg <- prediction(vamp_dat_all$mean_ddg_2bzg, vamp_dat_all$class)
perf_2bzg <- performance(pred_2bzg, "tpr", "fpr")
df4 <- cbind(as.data.frame(perf_2bzg@x.values), as.data.frame(perf_2bzg@y.values),rep('2bzg',length(perf_2bzg@x.values[[1]])))
colnames(df4) <-c('fpr', 'tpr', 'pdb')
all_df <- rbind(df1, df2, df3, df4)
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
theme_bw(base_size = 20)
p
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0))
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20)
p
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20)
p
?scale_color_discrete
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('PDB ID: 2bzg 100% identity','PDB ID: 2gb4 80% identity',
'PDB ID: 3lcc 32 % identity', 'PDB ID: 1pjz 32 % identity'))
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('PDB ID: 2bzg 100% identity','PDB ID: 2gb4 80% identity',
'PDB ID: 3lcc 32 % identity', 'PDB ID: 1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = 'bottom')
p
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
#scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
#                     labels = c('PDB ID: 2bzg 100% identity','PDB ID: 2gb4 80% identity',
#                                'PDB ID: 3lcc 32 % identity', 'PDB ID: 1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = 'bottom')
p
png(filename = paste0(base_dir, 'roc_new.png'), width = 800, height = 600)
p
dev.off()
library(ROCR)
library(ggplot2)
library(reshape2)
#ROC curve from homology model ddgs and vamp seq categories (low vs low abundance) for hm ddg paper
base_dir <- "/home/henrike/Documents/PD_AS/projects/hm_ddgs/"
#load in merged vamp seq data and create high and low data sets with the rule:
########################################################
#low-abundance are variants where score + SD < 0.72 and high abundance are vars where score - SD > 0.72
vamp_dat_all <- read.csv(paste0(base_dir, 'data/prism_merge_hmddgs_vampseq.txt'), comment.char = '#',
sep = ' ', col.names = c('variant', 'vamp_score', 'vamp_sd', 'mean_ddg_3lcc', 'std_ddg_3lcc',
'mean_ddg_1pjz', 'std_ddg_1pjz', 'mean_ddg_2gb4', 'std_ddg_2gb4',
'mean_ddg_2bzg', 'std_ddg_2bzg'))
#find low and high abundant vars in one go (nested ifelse)
vamp_dat_all$class <- ifelse((vamp_dat_all$vamp_score - vamp_dat_all$vamp_sd)> 0.72, 'H',
ifelse((vamp_dat_all$vamp_score + vamp_dat_all$vamp_sd)< 0.72, 'L', NA))
#drop WT
#vamp_dat_all <- vamp_dat_all[-1,]
#drop rows where class is NA. Actually also drop rows where the ddgs are NA since we can't use these for the ROC, so just complete cases
vamp_dat_all <- vamp_dat_all[complete.cases(vamp_dat_all),]
m <- melt(vamp_dat_all, id.vars = c('variant', 'vamp_score', 'vamp_sd', 'class'),
measure.vars = c('mean_ddg_3lcc', 'mean_ddg_1pjz', 'mean_ddg_2gb4', 'mean_ddg_2bzg'))
p3 <- ggplot(m, aes(x=variable, y=value, color = class)) +
geom_boxplot() +
xlab('model') + ylab('ddG') +
theme_bw(base_size = 20)
p3
png(filename = paste0(base_dir, 'ddg_separation_box.png'), width = 800, height = 600)
p3
dev.off()
pred_3lcc <- prediction(vamp_dat_all$mean_ddg_3lcc, vamp_dat_all$class)
perf_3lcc <- performance(pred_3lcc, "tpr", "fpr")
df1 <- cbind(as.data.frame(perf_3lcc@x.values),as.data.frame(perf_3lcc@y.values),rep('3lcc',length(perf_3lcc@x.values[[1]])))
colnames(df1) <-c('fpr', 'tpr', 'pdb')
pred_1pjz <- prediction(vamp_dat_all$mean_ddg_1pjz, vamp_dat_all$class)
perf_1pjz <- performance(pred_1pjz, "tpr", "fpr")
df2 <- cbind(as.data.frame(perf_1pjz@x.values), as.data.frame(perf_1pjz@y.values),rep('1pjz',length(perf_1pjz@x.values[[1]])))
colnames(df2) <-c('fpr', 'tpr', 'pdb')
pred_2gb4 <- prediction(vamp_dat_all$mean_ddg_2gb4, vamp_dat_all$class)
perf_2gb4 <- performance(pred_2gb4, "tpr", "fpr")
df3 <- cbind(as.data.frame(perf_2gb4@x.values), as.data.frame(perf_2gb4@y.values),rep('2gb4',length(perf_2gb4@x.values[[1]])))
colnames(df3) <-c('fpr', 'tpr', 'pdb')
pred_2bzg <- prediction(vamp_dat_all$mean_ddg_2bzg, vamp_dat_all$class)
perf_2bzg <- performance(pred_2bzg, "tpr", "fpr")
df4 <- cbind(as.data.frame(perf_2bzg@x.values), as.data.frame(perf_2bzg@y.values),rep('2bzg',length(perf_2bzg@x.values[[1]])))
colnames(df4) <-c('fpr', 'tpr', 'pdb')
all_df <- rbind(df1, df2, df3, df4)
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('PDB ID: 2bzg 100% identity','PDB ID: 2gb4 80% identity',
'PDB ID: 3lcc 32 % identity', 'PDB ID: 1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = 'bottom')
p
png(filename = paste0(base_dir, 'roc_new.png'), width = 800, height = 800)
p
dev.off()
auc_3lcc <- performance(pred_3lcc, measure = "auc")
auc_3lcc
View(auc_3lcc)
auc_3lcc@y.values
auc_3lcc@y.values[[1]]
auc_3lcc <- performance(pred_3lcc, measure = "auc")@y.values[[1]]
auc_3lcc
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.4),
legend.direction = "vertical")
p
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical")
p
#aucs:
print(c('auc_3lcc', auc_3lcc))
#aucs:
print(c('auc_2bzg', auc_2bzg))
print(c('auc_2gb4', auc_2gb4))
print(c('auc_3lcc', auc_3lcc))
print(c('auc_1pjz', auc_1pjz))
pred_3lcc <- prediction(vamp_dat_all$mean_ddg_3lcc, vamp_dat_all$class)
perf_3lcc <- performance(pred_3lcc, "tpr", "fpr")
df1 <- cbind(as.data.frame(perf_3lcc@x.values),as.data.frame(perf_3lcc@y.values),rep('3lcc',length(perf_3lcc@x.values[[1]])))
colnames(df1) <-c('fpr', 'tpr', 'pdb')
auc_3lcc <- performance(pred_3lcc, measure = "auc")@y.values[[1]]
pred_1pjz <- prediction(vamp_dat_all$mean_ddg_1pjz, vamp_dat_all$class)
perf_1pjz <- performance(pred_1pjz, "tpr", "fpr")
df2 <- cbind(as.data.frame(perf_1pjz@x.values), as.data.frame(perf_1pjz@y.values),rep('1pjz',length(perf_1pjz@x.values[[1]])))
colnames(df2) <-c('fpr', 'tpr', 'pdb')
auc_1pjz <- performance(pred_1pjz, measure = "auc")@y.values[[1]]
pred_2gb4 <- prediction(vamp_dat_all$mean_ddg_2gb4, vamp_dat_all$class)
perf_2gb4 <- performance(pred_2gb4, "tpr", "fpr")
df3 <- cbind(as.data.frame(perf_2gb4@x.values), as.data.frame(perf_2gb4@y.values),rep('2gb4',length(perf_2gb4@x.values[[1]])))
colnames(df3) <-c('fpr', 'tpr', 'pdb')
auc_2gb4 <- performance(pred_2gb4, measure = "auc")@y.values[[1]]
pred_2bzg <- prediction(vamp_dat_all$mean_ddg_2bzg, vamp_dat_all$class)
perf_2bzg <- performance(pred_2bzg, "tpr", "fpr")
df4 <- cbind(as.data.frame(perf_2bzg@x.values), as.data.frame(perf_2bzg@y.values),rep('2bzg',length(perf_2bzg@x.values[[1]])))
colnames(df4) <-c('fpr', 'tpr', 'pdb')
auc_2bzg <- performance(pred_2bzg, measure = "auc")@y.values[[1]]
#aucs:
print(c('auc_2bzg', auc_2bzg))
print(c('auc_2gb4', auc_2gb4))
print(c('auc_3lcc', auc_3lcc))
print(c('auc_1pjz', auc_1pjz))
png(filename = paste0(base_dir, 'roc_new.png'), width = 800, height = 800)
p
dev.off()
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical") +
theme_bw(base_size = 20)
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical")
p
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical")
p
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity')) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical")
p
#color blind safe palette
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_discrete(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity'),
values=cbPalette) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical")
p <- ggplot(all_df, aes(x=fpr, y=tpr, color = pdb)) +
geom_line() +
#add 45deg line
geom_abline(intercept =0 , slope = 1) +
xlab('False positive rate') + ylab('True positive rate') +
xlim(0,1.0) + ylim(0,1.0) +
scale_color_manual(limits = c('2bzg', '2gb4', '3lcc', '1pjz'),
labels = c('2bzg 100% identity','2gb4 80% identity',
'3lcc 32 % identity', '1pjz 32 % identity'),
values=cbPalette) +
scale_x_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme_bw(base_size = 20) + theme(legend.position = c(0.8, 0.3),
legend.direction = "vertical")
p
png(filename = paste0(base_dir, 'roc_new.png'), width = 800, height = 800)
p
dev.off()
png(filename = paste0(base_dir, 'roc_new.png'), width = 600, height = 600)
p
dev.off()
png(filename = paste0(base_dir, 'roc_new.png'), width = 700, height = 700)
p
dev.off()
library(ROCR)
?prediction
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
version
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
View(trees)
data("trees")
data("trees")
?trees
data("trees")
data("trees")
?trees
force(trees)
View(trees)
library(tidyverse)
?ifelse
df <- data.frame(ColA = c(1, 9, 7, 6, 4),
ColB = c(2, 2, 2, 2, 2),
ColC = c(3, 1, 3, 3, 1),
ColD = c(5, 5, 5, 5, 5))
View(df)
df$answer <- names(df)[apply(df, MARGIN = 1, FUN = which.min)]
df
names(df)
df$E <- NA
for (i in 1:nrow(df)) {
df$E[i] <- min(df[i,c("A","B","C")])
}
for (i in 1:nrow(df)) {
df$E[i] <- min(df[i,c("ColA","ColB","ColC")])
}
df
i <- 3
min(df[i,c("ColA","ColB","ColC")])
?which.min
which.min(df[i,c("ColA","ColB","ColC")])
which.min(df[i,c("ColA","ColB","ColC")])[1]
names(which.min(df[i,c("ColA","ColB","ColC")]))
df <- data.frame(ColA = c(1, 9, 7, 6, 4),
ColB = c(2, 2, 2, 2, 2),
ColC = c(3, 1, 3, 3, 1),
ColD = c(5, 5, 5, 5, 5))
for (i in 1:nrow(df)) {
df$E[i] <- min(df[i,c("ColA","ColB","ColC")])
df$bla <-  names(which.min(df[i,c("ColA","ColB","ColC")]))
}
df
which.min(df[i,c("ColA","ColB","ColC")])
for (i in 1:nrow(df)) {
df$E[i] <- min(df[i,c("ColA","ColB","ColC")])
df$bla[i] <- names(which.min(df[i,c("ColA","ColB","ColC")]))
}
df
df <- data.frame(ColA = c(1, 9, 7, 6, 4),
ColB = c(2, 2, 2, 2, 2),
ColC = c(3, 1, 3, 3, 1),
ColD = c(5, 5, 5, 5, 5))
for (i in 1:nrow(df)) {
df$E[i] <- min(df[i,c("ColA","ColB","ColC")])
df$bla[i] <- names(which.min(df[i,c("ColA","ColB","ColC")]))
}
df
mtcars
mtcars[,c("am","cyl","hp","wt")]
?mtcars
gc()
library(ggplot2)
sessionInfo()
gc()
library(readxl)
library(writexl)
library(tidyverse)
library(ggplot2)
### Set working directory ----
#setwd('/Users/pbj825/Desktop/FromExceltoR/Presentations/')
setwd('~/Documents/Heads_center_management/courses/excel_to_r/oct2022/FromExceltoR/Presentations/')
### Reading in data and filtering out entries where size is 0 ----
downloads <-
read_excel("data/downloads.xlsx") %>%
filter(size > 0)
downloads
ggplot(downloads,aes(x=machineName,y=size))
ggplot(downloads, aes(x = machineName, y = size/10^6)) +
geom_col()
#HZ: these are the values
downloads %>% group_by(machineName) %>% summarize(tot = sum(size)/10^6)
#add position dodge
ggplot(downloads, aes(x = machineName, y = size/10^6, fill = month)) +
geom_col(position = "dodge")
