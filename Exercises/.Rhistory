# Look at the data:
head(exprDat, n=5)
dim(exprDat)
head(exprInfo)
exprInfo <- exprInfo %>%
mutate(CellType = as.factor(CellType),
Status = factor(Status, levels = c("control", "pregnant", "lactate")),
Status.Type = as.factor(Status.Type))
head(exprInfo)
dim(exprDat)
exprDat <- exprDat %>%
mutate(nzeros = rowSums(dplyr::select(.,-EntrezGeneID, -GeneName)==0)) %>%
filter(nzeros <= 8) %>%
dplyr::select(-nzeros)
dim(exprDat)
exprDat
exprDat <- exprDat %>%
dplyr::select(-EntrezGeneID) %>%
column_to_rownames(., var = "GeneName")
exprObj <- DESeqDataSetFromMatrix(countData = exprDat,
colData = exprInfo,
design= ~CellType+Status)
exprObj
exprObj <- DESeq(exprObj)
resLC <- results(exprObj, contrast = c("Status", "lactate", "control"), independentFiltering = FALSE)
resLC
exprDat <- read_excel("MouseRNAseq.xlsx")
exprInfo <- read_excel("MouseSampleInfo.xlsx")
# Look at the data:
head(exprDat, n=5)
dim(exprDat)
head(exprInfo)
exprInfo <- exprInfo %>%
mutate(CellType = as.factor(CellType),
Status = factor(Status, levels = c("control", "pregnant", "lactate")),
Status.Type = as.factor(Status.Type))
head(exprInfo)
# Count number of 0s across samples. Filter samples where at least four samples has a count great than 0.
exprDat <- exprDat %>%
mutate(nzeros = rowSums(dplyr::select(.,-EntrezGeneID, -GeneName)==0)) %>%
filter(nzeros <= 8) %>%
dplyr::select(-nzeros)
#How many genes do we have left:
dim(exprDat)
exprDat
# Pull out GeneNames and EntrezGeneID for later use
GeneNames <- exprDat %>% EntrezGeneID
# Pull out GeneNames and EntrezGeneID for later use
GeneNames <- exprDat %>%
dplyr::select(EntrezGeneID, GeneName)
exprDat <- exprDat %>%
dplyr::select(-EntrezGeneID) %>%
column_to_rownames(., var = "GeneName")
GeneNames
exprDat
setwd("~/Desktop/FromExceltoR/Exercises")
airDat
which(duplicated(airDat$GeneSymbol))
head(airDat)
length(which(duplicated(airDat$GeneSymbol)))
dim(airDat)
library(tidyverse)
library(ggplot2)
library(readxl)
#install.packages("BiocManager")
library(BiocManager)
#BiocManager::install("DESeq2")
library(DESeq2)
#BiocManager::install("biomaRt")
library(biomaRt)
#BiocManager::install("EDASeq")
library(EDASeq)
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
dim(airDat)
airMet <- airMet %>%
mutate(condition=as.factor(condition), celltype=as.factor(celltype))
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
airDat <- airDat %>%
filter(nzeros <= 4) %>%
dplyr::select(-nzeros)
dim(airDat)
airDat
dim(airDat)
length(which(duplicated(airDat$GeneSymbol)))
airDat <- airDat %>%
filter(!duplicated(ensgene))
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
dim(airDat)
airMet <- airMet %>%
mutate(condition=as.factor(condition), celltype=as.factor(celltype))
dim(airDat)
head(airDat)
airDat <- airDat %>%
filter(!duplicated(GeneSymbol))
dim(airDat)
write_xlsx(airDat, "airway_counts.xlsx")
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
airMet
airDat
dim(airDat)
dim(airDat)
airMet <- airMet %>%
mutate(condition=as.factor(condition), celltype=as.factor(celltype))
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
airDat <- airDat %>%
filter(nzeros <= 4) %>%
dplyr::select(-nzeros)
dim(airDat)
airPlot <- airDat %>%
dplyr::select(-ensgene, -Length) %>%
gather(key = ID, value=geneCount)
airDat
airPlot <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
gather(key = ID, value=geneCount)
p1 <- ggplot(airPlot, aes(ID, geneCount)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
p1
p2 <- ggplot(airPlot, aes(ID, log2(geneCount+1))) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
p2
# Converts tibble to matrix of expression counts and removes gene information:
airDatM <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
as.matrix() %>%
unname()
# Make EDASeq object
EDAobj <- newSeqExpressionSet(airDatM,
phenoData=AnnotatedDataFrame(data.frame(condition=airMet$condition,
celltype=airMet$celltype)),
featureData=AnnotatedDataFrame(data.frame(gc=airDat$GC,
gl=airDat$Length)))
# Bias plots
par(mfrow=c(1,2))
biasPlot(EDAobj, "gc", log=TRUE, ylim=c(0,10))
biasPlot(EDAobj, "gl", log=TRUE, ylim=c(0,10))
airDat$Length
airDat$GC
airDat
airDat <- airDat %>% mutate(Length= as.numeric(Length))
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
airDat <- airDat %>%
filter(nzeros <= 4) %>%
dplyr::select(-nzeros)
dim(airDat)
airDat
is.na(airDat$GC)
which(is.na(airDat$GC))
which(is.na(airDat$Length))
airDat$Length
which(airDat$Length == NA)
which(airDat$Length == "NA")
length(which(airDat$Length == "NA"))
airDat[18395:18400,]
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
airMet
airDat
dim(airDat)
airDat <- airDat[-which(airDat$Length == "NA"),]
dim(airDat)
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
setwd("~/Desktop")
test <- read.csv("airway_counts.csv", sep =",")
head(test)
length(which(is.na(test$Length)))
dim(test)
length(which(duplicated(airDat$Ensgene)))
which(duplicated(airDat$Ensgene))
which(duplicated(airDat$Ensgene))
airDat[c(25879,33459), ]
dim(airDat)
airDat <- airDat[-25879, ]
dim(airDat)
which(duplicated(airDat$Ensgene))
airDat <- airDat[-33458, ]
which(duplicated(airDat$Ensgene))
dim(airDat)
test <- test[-which(duplicated(test$ensgene)),]
dim(test)
test
test <- read.csv("airway_counts.csv", sep =",")
test <- test[-which(duplicated(test$ensgene)),]
test
test <- read.csv("airway_counts.csv", sep =",")
head(test)
dim(test)
which(duplicated(test$ensgene)
length(which(duplicated(test$ensgene)))
test
test <- as_tibble(test)
test
test2 <- test[, 1:2]
head(test2)
dim(test2)
airDat <- dplyr::select(-Length) %>% left_join(.,test2)
airDat <-  airDat %>% dplyr::select(-Length) %>% left_join(.,test2)
airDat
test2 <- test2 %>% rename(Ensgene = ensgene)
test2
dim(airDat)
airDat <-  airDat %>% dplyr::select(-Length) %>% left_join(.,test2)
dim(airDat)
airDat
length(which(is.na(airDat$Length)))
airDat <- airDat %>% filter(!duplicated(Length))
dim(airDat)
setwd("~/Desktop/FromExceltoR/Exercises")
airDat <- read_xlsx("airway_counts.xlsx")
dim(airDat)
airDat <- airDat[-c(25879,33459), ]
dim(airDat)
airDat <-  airDat %>% dplyr::select(-Length) %>% left_join(.,test2)
dim(airDat)
airDat <- airDat %>% filter(!is.na(Length))
dim(airDat)
head(airDat)
write_xlsx(airDat, "airway_counts.xlsx")
airDat <- read_xlsx("airway_counts.xlsx")
dim(airDat)
head(airDat)
airDat
airDat %>% relocate(Length, .after = GC)
airDat <- airDat %>% relocate(Length, .after = GC)
write_xlsx(airDat, "airway_counts.xlsx")
airDat <- read_xlsx("airway_counts.xlsx")
airDat
dim(airDat)
dim(airDat)
airMet <- airMet %>%
mutate(condition=as.factor(condition), celltype=as.factor(celltype))
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
airDat <- airDat %>%
filter(nzeros <= 4) %>%
dplyr::select(-nzeros)
dim(airDat)
airPlot <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
gather(key = ID, value=geneCount)
p1 <- ggplot(airPlot, aes(ID, geneCount)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
p1
p2 <- ggplot(airPlot, aes(ID, log2(geneCount+1))) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
p2
# Converts tibble to matrix of expression counts and removes gene information:
airDatM <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
as.matrix() %>%
unname()
# Make EDASeq object
EDAobj <- newSeqExpressionSet(airDatM,
phenoData=AnnotatedDataFrame(data.frame(condition=airMet$condition,
celltype=airMet$celltype)),
featureData=AnnotatedDataFrame(data.frame(gc=airDat$GC,
gl=airDat$Length)))
# Bias plots
par(mfrow=c(1,2))
biasPlot(EDAobj, "gc", log=TRUE, ylim=c(0,10))
biasPlot(EDAobj, "gl", log=TRUE, ylim=c(0,10))
setwd("~/Desktop")
exprDat <- read_delim("GSE60450_Lactation-GenewiseCounts.txt", delim = "\t")
airDat <- read.csv("airway_counts.csv")
airDat <- read.csv("airway_counts.csv", sep = ",")
airDat
dim(airDat)
head(airDat)
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
attributes[grep("symbol", attributes$name),]
attributes[grep("ensembl", attributes$name),]
head(attributes[grep("ensembl", attributes$name),])
attributes[grep("symbol", attributes$name),]
IDs <- getBM(attributes=c('ensembl_gene_id',
'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = unique(airDat$ensgene),
mart = ensembl) %>%
as_tibble()
IDs
length(which(duplicated(airDat$ensgene)))
length(which(duplicated(IDs$ensembl_gene_id)))
which(duplicated(IDs$ensembl_gene_id))
IDs <- IDs[-c(30307,44121),]
which(duplicated(IDs$ensembl_gene_id))
dim(IDs)
out <- getBM(attributes=c("ensembl_gene_id",
"hgnc_symbol",
"percentage_gene_gc_content"),
filters="ensembl_gene_id",
values=unique(airDat$ensgene),
mart=ensembl)  %>%
as_tibble() %>%
dplyr::rename(ensgene=ensembl_gene_id, GC=percentage_gene_gc_content, geneSymbol=hgnc_symbol) %>%
right_join(., airDat, by="ensgene") %>%
filter(!is.na(GC))
out
dim(out)
out <- out %>%
filter(!duplicated(ensgene))
dim(out)
head(out)
out <- out %>%
filter(!is.na(Length))
head(out)
dim(out)
airDat
head(out)
which(is.na(out$GC))
which(is.na(out$Length))
out <- out %>%
filter(!duplicated(geneSymbol))
dim(oit)
dim(out)
head(out)
setwd("~/Desktop")
write_xlsx(out, "airway_counts.xlsx")
airDat <- read_xlsx("airway_counts.xlsx")
head(airDat)
dim(airDat)
setwd("~/Desktop/FromExceltoR/Exercises")
airDat <- read_xlsx("airway_counts.xlsx")
#airDat
airMet <- read_xlsx("airway_metadata.xlsx")
#airMet
airDat
dim(airDat)
dim(airDat)
airMet <- airMet %>%
mutate(condition=as.factor(condition), celltype=as.factor(celltype))
airDat <- airDat %>%
mutate(nzeros = rowSums(dplyr::select(., -Ensgene, -GeneSymbol, -GC, -Length)==0))
airDat <- airDat %>%
filter(nzeros <= 4) %>%
dplyr::select(-nzeros)
dim(airDat)
airPlot <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
gather(key = ID, value=geneCount)
p1 <- ggplot(airPlot, aes(ID, geneCount)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
p1
# Converts tibble to matrix of expression counts and removes gene information:
airDatM <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
as.matrix() %>%
unname()
# Make EDASeq object
EDAobj <- newSeqExpressionSet(airDatM,
phenoData=AnnotatedDataFrame(data.frame(condition=airMet$condition,
celltype=airMet$celltype)),
featureData=AnnotatedDataFrame(data.frame(gc=airDat$GC,
gl=airDat$Length)))
# Bias plots
par(mfrow=c(1,2))
biasPlot(EDAobj, "gc", log=TRUE, ylim=c(0,10))
biasPlot(EDAobj, "gl", log=TRUE, ylim=c(0,10))
# Bias plots
par(mfrow=c(1,2))
biasPlot(EDAobj, "gc", log=TRUE, ylim=c(0,10))
biasPlot(EDAobj, "gl", log=TRUE, ylim=c(0,10))
EDAobjNorm <- withinLaneNormalization(EDAobj, "gc", which="full", offset=TRUE) %>%
withinLaneNormalization(., "gl", which="full", offset=TRUE)
par(mfrow=c(1,2))
biasPlot(EDAobjNorm, "gc", log=TRUE, ylim=c(0,20))
biasPlot(EDAobjNorm, "gl", log=TRUE, ylim=c(0,20))
# EDAobjNorm <- load("EDAobjNorm.Rdata")
exprObj <- DESeqDataSetFromMatrix(countData = counts(EDAobjNorm),
colData = pData(EDAobjNorm),
design = ~celltype+condition)
normFactors <- exp(-1 * offst(EDAobjNorm))
normFactors <- normFactors / exp(rowMeans(log(normFactors)))
normalizationFactors(exprObj) <- normFactors
exprObjvst <- vst(exprObj,blind=FALSE)
boxplot(assay(exprObjvst), xlab="", ylab="Log2 counts per million reads mapped ",las=2)
# un-transformed counts
unTrf <- assay(exprObj)
head(unTrf, n=3)
# vst transformed counts
vstTrf <- assay(exprObjvst)
head(vstTrf, n=3)
# un-transformed counts
unTrf <- unTrf %>% t() %>%
dist() %>% cmdscale(., eig=TRUE, k=2)
unTrf <- tibble(PC1=unTrf$points[,1],PC2=unTrf$points[,2])
# vst transformed counts
vstTrf <- vstTrf %>% t() %>%
dist() %>% cmdscale(., eig=TRUE, k=2)
vstTrf <- tibble(PC1=vstTrf$points[,1],PC2=vstTrf$points[,2])
source("customFuncs.R")
library(gridExtra)
# Make plot
p3 <- pcaPlot(unTrf, airMet$condition, airMet$celltype, c("#7692FF", "#F26419"))
p4 <- pcaPlot(vstTrf, airMet$condition, airMet$celltype, c("#7692FF", "#F26419"))
#grid.arrange(p3, p4, nrow=1)
# PCA Plot
# Takes as arguments:
# countDat = a dataframe of expression counts
# groupVar = a factor vector of groups (conditions) to color points by (may be the same or different as labelVar)
# labelVar = a vector of IDs for labeling (may be the same or different as groupVar)
# colVar = a vector of colors (one color for each group)
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pcaPlot <- function(countDat, groupVar, labelVar, colVar) {
# Make basic plot
pcap <- ggplot(data=countDat) + geom_point(aes(x=PC1,y=PC2,color= groupVar), size=2) +
geom_text(aes(x=PC1,y=PC2, label=labelVar)) +
# Improve look of plot:
theme_minimal() + theme(panel.grid.minor = element_blank()) +
scale_color_manual(values = colVar) +
theme(legend.title=element_blank(), legend.text = element_text(size = 12, face="bold"), legend.position = "top", axis.title=element_text(size=12,face="bold")) +
guides(colour = guide_legend(override.aes = list(size=6)))
return(pcap)
}
# Make plot
p3 <- pcaPlot(unTrf, airMet$condition, airMet$celltype, c("#7692FF", "#F26419"))
p4 <- pcaPlot(vstTrf, airMet$condition, airMet$celltype, c("#7692FF", "#F26419"))
p3
p4
# Fitting gene-wise glm models:
exprObj <- DESeq(exprObj)
resTC <- results(. , contrast = c(), independentFiltering = FALSE)
# Test for DE genes between lactating mice and control mice adjusted for cell type:
# Lactating vs Control mice
resTC <- results(exprObj, contrast = c("condition", "treated", "control"), independentFiltering = FALSE)
# Summary and plot of DE analysis results:
summary(resTC)
DESeq2::plotMA(resTC)
resTC <- resTC %>%
as_tibble() %>%
mutate(dir=factor(ifelse(log2FoldChange >= 1.0, "Up", "Down"), levels=c("Up", "Down")),
geneSymbol=airDat$geneSymbol) %>%
filter((log2FoldChange > 1.0 | log2FoldChange < -1.0) & padj < 0.05) %>%
arrange(padj, desc(abs(log2FoldChange))) %>%
top_n(50)
resTC
# Converts tibble to matrix of expression counts and removes gene information:
airDatM <- airDat %>%
dplyr::select(-Ensgene, -GeneSymbol, -GC, -Length) %>%
as.matrix() %>%
unname()
# Make EDASeq object
EDAobj <- newSeqExpressionSet(airDatM,
phenoData=AnnotatedDataFrame(data.frame(condition=airMet$condition,
celltype=airMet$celltype)),
featureData=AnnotatedDataFrame(data.frame(GC=airDat$GC,
Length=airDat$Length)))
# Bias plots
par(mfrow=c(1,2))
biasPlot(EDAobj, "GC", log=TRUE, ylim=c(0,10))
biasPlot(EDAobj, "Length", log=TRUE, ylim=c(0,10))
EDAobjNorm <- withinLaneNormalization(EDAobj, "GC", which="full", offset=TRUE) %>%
withinLaneNormalization(., "Length", which="full", offset=TRUE)
par(mfrow=c(1,2))
biasPlot(EDAobjNorm, "GC", log=TRUE, ylim=c(0,20))
biasPlot(EDAobjNorm, "Length", log=TRUE, ylim=c(0,20))
exprObj <- DESeqDataSetFromMatrix(countData = airDat[,-c(1:4)],
rowData = airDat[,1:4],
colData = airMet,
design=~celltype+condition)
exprObj
# EDAobjNorm <- load("EDAobjNorm.Rdata")
exprObj <- DESeqDataSetFromMatrix(countData = counts(EDAobjNorm),
colData = pData(EDAobjNorm),
design = ~celltype+condition)
normFactors <- exp(-1 * offst(EDAobjNorm))
normFactors <- normFactors / exp(rowMeans(log(normFactors)))
normalizationFactors(exprObj) <- normFactors
pcap <- ggplot(data=unTrf) + geom_point(aes(x=PC1,y=PC2,color= airMet$condition), size=2) +
geom_text(aes(x=PC1,y=PC2, label=airMet$celltype))
pcap
# Test for DE genes between lactating mice and control mice adjusted for cell type:
# Lactating vs Control mice
resTC <- results(exprObj, contrast = c("condition", "treated", "control"), independentFiltering = FALSE)
# Fitting gene-wise glm models:
exprObj <- DESeq(exprObj)
# Test for DE genes between lactating mice and control mice adjusted for cell type:
# Lactating vs Control mice
resTC <- results(exprObj, contrast = c("condition", "treated", "control"), independentFiltering = FALSE)
resTC <- resTC %>%
as_tibble() %>%
mutate(dir=factor(ifelse(log2FoldChange >= 1.0, "Up", "Down"), levels=c("Up", "Down")),
geneSymbol=airDat$GeneSymbol) %>%
filter((log2FoldChange > 1.0 | log2FoldChange < -1.0) & padj < 0.05) %>%
arrange(padj, desc(abs(log2FoldChange))) %>%
top_n(50)
airMet
airDat %>% dplyr::select(1:4)
# Gene information
airDat %>%
dplyr::select(1:4) %>%
head(., n=3)
# Number of genes
nrow(airDat)
# Number of Samples
nrow(airDat)-4
